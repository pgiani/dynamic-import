[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar _ = Package.underscore._;\nvar meteorInstall = Package.modules.meteorInstall;\nvar process = Package.modules.process;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-server'].Symbol;\nvar Map = Package['ecmascript-runtime-server'].Map;\nvar Set = Package['ecmascript-runtime-server'].Set;\n\n/* Package-scope variables */\nvar resetDatabase;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"xolvio:cleaner\":{\"cleaner.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/xolvio_cleaner/cleaner.js                                                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nif (Meteor.isServer) {                                                                                               // 1\n  var _resetDatabase = function (options) {                                                                          // 2\n    if (process.env.NODE_ENV !== 'development') {                                                                    // 3\n      throw new Error('resetDatabase is not allowed outside of a development mode. ' + 'Aborting.');                 // 4\n    }                                                                                                                // 8\n                                                                                                                     //\n    options = options || {};                                                                                         // 10\n    var excludedCollections = ['system.indexes'];                                                                    // 11\n                                                                                                                     //\n    if (options.excludedCollections) {                                                                               // 12\n      excludedCollections = excludedCollections.concat(options.excludedCollections);                                 // 13\n    }                                                                                                                // 14\n                                                                                                                     //\n    var db = MongoInternals.defaultRemoteCollectionDriver().mongo.db;                                                // 16\n    var getCollections = Meteor.wrapAsync(db.collections, db);                                                       // 17\n    var collections = getCollections();                                                                              // 18\n                                                                                                                     //\n    var appCollections = _.reject(collections, function (col) {                                                      // 19\n      return col.collectionName.indexOf('velocity') === 0 || excludedCollections.indexOf(col.collectionName) !== -1;\n    });                                                                                                              // 22\n                                                                                                                     //\n    _.each(appCollections, function (appCollection) {                                                                // 24\n      var remove = Meteor.wrapAsync(appCollection.remove, appCollection);                                            // 25\n      remove({});                                                                                                    // 26\n    });                                                                                                              // 27\n  };                                                                                                                 // 28\n                                                                                                                     //\n  Meteor.methods({                                                                                                   // 30\n    'xolvio:cleaner/resetDatabase': function (options) {                                                             // 31\n      _resetDatabase(options);                                                                                       // 32\n    }                                                                                                                // 33\n  });                                                                                                                // 30\n                                                                                                                     //\n  resetDatabase = function (options, callback) {                                                                     // 36\n    _resetDatabase(options);                                                                                         // 37\n                                                                                                                     //\n    if (typeof callback === 'function') {                                                                            // 38\n      callback();                                                                                                    // 38\n    }                                                                                                                // 38\n  };                                                                                                                 // 39\n}                                                                                                                    // 41\n                                                                                                                     //\nif (Meteor.isClient) {                                                                                               // 42\n  resetDatabase = function (options, callback) {                                                                     // 43\n    Meteor.call('xolvio:cleaner/resetDatabase', options, callback);                                                  // 44\n  };                                                                                                                 // 45\n}                                                                                                                    // 46\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"./node_modules/meteor/xolvio:cleaner/cleaner.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['xolvio:cleaner'] = {}, {\n  resetDatabase: resetDatabase\n});\n\n})();\n","servePath":"/packages/xolvio_cleaner.js","sourceMap":{"version":3,"sources":["packages/xolvio:cleaner/cleaner.js"],"names":["Meteor","isServer","_resetDatabase","options","process","env","NODE_ENV","Error","excludedCollections","concat","db","MongoInternals","defaultRemoteCollectionDriver","mongo","getCollections","wrapAsync","collections","appCollections","_","reject","col","collectionName","indexOf","each","appCollection","remove","methods","resetDatabase","callback","isClient","call"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,OAAOC,QAAX,EAAqB;AACnB,MAAMC,iBAAiB,UAAUC,OAAV,EAAmB;AACxC,QAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1C,YAAM,IAAIC,KAAJ,CACJ,iEACA,WAFI,CAAN;AAID;;AAEDJ,cAAUA,WAAW,EAArB;AACA,QAAIK,sBAAsB,CAAC,gBAAD,CAA1B;;AACA,QAAIL,QAAQK,mBAAZ,EAAiC;AAC/BA,4BAAsBA,oBAAoBC,MAApB,CAA2BN,QAAQK,mBAAnC,CAAtB;AACD;;AAED,QAAIE,KAAKC,eAAeC,6BAAf,GAA+CC,KAA/C,CAAqDH,EAA9D;AACA,QAAII,iBAAiBd,OAAOe,SAAP,CAAiBL,GAAGM,WAApB,EAAiCN,EAAjC,CAArB;AACA,QAAIM,cAAcF,gBAAlB;;AACA,QAAIG,iBAAiBC,EAAEC,MAAF,CAASH,WAAT,EAAsB,UAAUI,GAAV,EAAe;AACxD,aAAOA,IAAIC,cAAJ,CAAmBC,OAAnB,CAA2B,UAA3B,MAA2C,CAA3C,IACLd,oBAAoBc,OAApB,CAA4BF,IAAIC,cAAhC,MAAoD,CAAC,CADvD;AAED,KAHoB,CAArB;;AAKAH,MAAEK,IAAF,CAAON,cAAP,EAAuB,UAAUO,aAAV,EAAyB;AAC9C,UAAIC,SAASzB,OAAOe,SAAP,CAAiBS,cAAcC,MAA/B,EAAuCD,aAAvC,CAAb;AACAC,aAAO,EAAP;AACD,KAHD;AAID,GA1BD;;AA4BAzB,SAAO0B,OAAP,CAAe;AACb,oCAAgC,UAAUvB,OAAV,EAAmB;AACjDD,qBAAeC,OAAf;AACD;AAHY,GAAf;;AAMAwB,kBAAgB,UAASxB,OAAT,EAAkByB,QAAlB,EAA4B;AAC1C1B,mBAAeC,OAAf;;AACA,QAAI,OAAOyB,QAAP,KAAoB,UAAxB,EAAoC;AAAEA;AAAa;AACpD,GAHD;AAKD;;AACD,IAAI5B,OAAO6B,QAAX,EAAqB;AACnBF,kBAAgB,UAASxB,OAAT,EAAkByB,QAAlB,EAA4B;AAC1C5B,WAAO8B,IAAP,CAAY,8BAAZ,EAA4C3B,OAA5C,EAAqDyB,QAArD;AACD,GAFD;AAGD,0H","file":"/packages/xolvio_cleaner.js","sourcesContent":["if (Meteor.isServer) {\n  const _resetDatabase = function (options) {\n    if (process.env.NODE_ENV !== 'development') {\n      throw new Error(\n        'resetDatabase is not allowed outside of a development mode. ' +\n        'Aborting.'\n      );\n    }\n\n    options = options || {};\n    var excludedCollections = ['system.indexes'];\n    if (options.excludedCollections) {\n      excludedCollections = excludedCollections.concat(options.excludedCollections);\n    }\n\n    var db = MongoInternals.defaultRemoteCollectionDriver().mongo.db;\n    var getCollections = Meteor.wrapAsync(db.collections, db);\n    var collections = getCollections();\n    var appCollections = _.reject(collections, function (col) {\n      return col.collectionName.indexOf('velocity') === 0 ||\n        excludedCollections.indexOf(col.collectionName) !== -1;\n    });\n\n    _.each(appCollections, function (appCollection) {\n      var remove = Meteor.wrapAsync(appCollection.remove, appCollection);\n      remove({});\n    });\n  };\n\n  Meteor.methods({\n    'xolvio:cleaner/resetDatabase': function (options) {\n      _resetDatabase(options);\n    }\n  });\n\n  resetDatabase = function(options, callback) {\n    _resetDatabase(options);\n    if (typeof callback === 'function') { callback(); }\n  }\n\n}\nif (Meteor.isClient) {\n  resetDatabase = function(options, callback) {\n    Meteor.call('xolvio:cleaner/resetDatabase', options, callback);\n  }\n}\n"]}}]