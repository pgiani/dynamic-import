[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"xolvio:backdoor\":{\"server.js\":function(require){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/xolvio_backdoor/server.js                                //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n/* globals meteorInstall: false */\nvar vm = Npm.require('vm');\n\nMeteor.methods({\n  'xolvio/backdoor': function (func, args) {\n    check(func, String);\n    check(args, Match.Optional(Array));\n\n    try {\n      const preparedFunc = vm.runInThisContext('(function (require) { return (' + func + '); })').call(null, meteorInstall());\n      return {\n        value: preparedFunc.apply(global, args)\n      };\n    } catch (error) {\n      return {\n        error: {\n          message: error.toString(),\n          stack: error.stack ? error.stack.toString() : '',\n          code: func\n        }\n      };\n    }\n  }\n});\n///////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/xolvio:backdoor/server.js\");\n\n/* Exports */\nPackage._define(\"xolvio:backdoor\");\n\n})();\n","servePath":"/packages/xolvio_backdoor.js","sourceMap":{"version":3,"sources":["packages/xolvio:backdoor/server.js"],"names":["vm","Npm","require","Meteor","methods","func","args","check","String","Match","Optional","Array","preparedFunc","runInThisContext","call","meteorInstall","value","apply","global","error","message","toString","stack","code"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAEA,IAAIA,EAAE,GAAGC,GAAG,CAACC,OAAJ,CAAY,IAAZ,CAAT;;AAEAC,MAAM,CAACC,OAAP,CAAe;AACb,qBAAmB,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACvCC,SAAK,CAACF,IAAD,EAAOG,MAAP,CAAL;AACAD,SAAK,CAACD,IAAD,EAAOG,KAAK,CAACC,QAAN,CAAeC,KAAf,CAAP,CAAL;;AAEA,QAAI;AACF,YAAMC,YAAY,GAAGZ,EAAE,CAACa,gBAAH,CACnB,mCAAmCR,IAAnC,GAA0C,OADvB,EAEnBS,IAFmB,CAEd,IAFc,EAERC,aAAa,EAFL,CAArB;AAGA,aAAO;AACLC,aAAK,EAAEJ,YAAY,CAACK,KAAb,CAAmBC,MAAnB,EAA2BZ,IAA3B;AADF,OAAP;AAGD,KAPD,CAOE,OAAOa,KAAP,EAAc;AACd,aAAO;AACLA,aAAK,EAAE;AACLC,iBAAO,EAAED,KAAK,CAACE,QAAN,EADJ;AAELC,eAAK,EAAEH,KAAK,CAACG,KAAN,GAAcH,KAAK,CAACG,KAAN,CAAYD,QAAZ,EAAd,GAAuC,EAFzC;AAGLE,cAAI,EAAElB;AAHD;AADF,OAAP;AAOD;AACF;AArBY,CAAf,E","file":"/packages/xolvio_backdoor.js","sourcesContent":["/* globals meteorInstall: false */\n\nvar vm = Npm.require('vm');\n\nMeteor.methods({\n  'xolvio/backdoor': function (func, args) {\n    check(func, String);\n    check(args, Match.Optional(Array));\n\n    try {\n      const preparedFunc = vm.runInThisContext(\n        '(function (require) { return (' + func + '); })'\n      ).call(null, meteorInstall());\n      return {\n        value: preparedFunc.apply(global, args)\n      };\n    } catch (error) {\n      return {\n        error: {\n          message: error.toString(),\n          stack: error.stack ? error.stack.toString() : '',\n          code: func\n        }\n      };\n    }\n  }\n});\n"]}}]