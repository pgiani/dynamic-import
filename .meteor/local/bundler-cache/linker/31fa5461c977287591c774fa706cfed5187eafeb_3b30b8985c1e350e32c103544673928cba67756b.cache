[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\nvar Random = Package.random.Random;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Factory;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"dburles:factory\":{\"factory.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/dburles_factory/factory.js                                                                        //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n/* global LocalCollection */\n\n/* global Factory:true */\nconst factories = {};\nFactory = class Factory {\n  constructor(name, collection, attributes) {\n    this.name = name;\n    this.collection = collection;\n    this.attributes = attributes;\n    this.afterHooks = [];\n    this.sequence = 0;\n  }\n\n  after(fn) {\n    this.afterHooks.push(fn);\n    return this;\n  }\n\n};\n\nFactory.define = (name, collection, attributes) => {\n  factories[name] = new Factory(name, collection, attributes);\n  return factories[name];\n};\n\nFactory.get = name => {\n  const factory = factories[name];\n\n  if (!factory) {\n    throw new Error(\"Factory: There is no factory named \" + name);\n  }\n\n  return factory;\n};\n\nFactory._build = (name, attributes = {}, userOptions = {}, options = {}) => {\n  const factory = Factory.get(name);\n  const result = {}; // \"raw\" attributes without functions evaluated, or dotted properties resolved\n\n  const extendedAttributes = _.extend({}, factory.attributes, attributes); // either create a new factory and return its _id\n  // or return a 'fake' _id (since we're not inserting anything)\n\n\n  const makeRelation = relName => {\n    if (options.insert) {\n      return Factory.create(relName, {}, userOptions)._id;\n    }\n\n    if (options.tree) {\n      return Factory._build(relName, {}, userOptions, {\n        tree: true\n      });\n    } // fake an id on build\n\n\n    return Random.id();\n  };\n\n  const getValue = value => {\n    return value instanceof Factory ? makeRelation(value.name) : value;\n  };\n\n  const getValueFromFunction = func => {\n    const api = {\n      sequence: fn => fn(factory.sequence)\n    };\n    const fnRes = func.call(result, api, userOptions);\n    return getValue(fnRes);\n  };\n\n  factory.sequence += 1;\n\n  const walk = (record, object) => {\n    _.each(object, (value, key) => {\n      let newValue = value; // is this a Factory instance?\n\n      if (value instanceof Factory) {\n        newValue = makeRelation(value.name);\n      } else if (_.isArray(value)) {\n        newValue = value.map(element => {\n          if (_.isFunction(element)) {\n            return getValueFromFunction(element);\n          }\n\n          return getValue(element);\n        });\n      } else if (_.isFunction(value)) {\n        newValue = getValueFromFunction(value); // if an object literal is passed in, traverse deeper into it\n      } else if (Object.prototype.toString.call(value) === '[object Object]') {\n        record[key] = record[key] || {};\n        return walk(record[key], value);\n      }\n\n      const modifier = {\n        $set: {}\n      };\n\n      if (key !== '_id') {\n        modifier.$set[key] = newValue;\n      }\n\n      LocalCollection._modify(record, modifier);\n    });\n  };\n\n  walk(result, extendedAttributes);\n\n  if (!options.tree) {\n    result._id = extendedAttributes._id || Random.id();\n  }\n\n  return result;\n};\n\nFactory.build = (name, attributes = {}, userOptions = {}) => {\n  return Factory._build(name, attributes, userOptions);\n};\n\nFactory.tree = (name, attributes, userOptions = {}) => {\n  return Factory._build(name, attributes, userOptions, {\n    tree: true\n  });\n};\n\nFactory._create = (name, doc) => {\n  const collection = Factory.get(name).collection;\n  const insertId = collection.insert(doc);\n  const record = collection.findOne(insertId);\n  return record;\n};\n\nFactory.create = (name, attributes = {}, userOptions = {}) => {\n  const doc = Factory._build(name, attributes, userOptions, {\n    insert: true\n  });\n\n  const record = Factory._create(name, doc);\n\n  Factory.get(name).afterHooks.forEach(cb => cb(record));\n  return record;\n};\n\nFactory.extend = (name, attributes = {}) => {\n  return _.extend(_.clone(Factory.get(name).attributes), attributes);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/dburles:factory/factory.js\");\n\n/* Exports */\nPackage._define(\"dburles:factory\", {\n  Factory: Factory\n});\n\n})();\n","servePath":"/packages/dburles_factory.js","sourceMap":{"version":3,"sources":["packages/dburles:factory/factory.js"],"names":["factories","Factory","constructor","name","collection","attributes","afterHooks","sequence","after","fn","push","define","get","factory","Error","_build","userOptions","options","result","extendedAttributes","_","extend","makeRelation","relName","insert","create","_id","tree","Random","id","getValue","value","getValueFromFunction","func","api","fnRes","call","walk","record","object","each","key","newValue","isArray","map","element","isFunction","Object","prototype","toString","modifier","$set","LocalCollection","_modify","build","_create","doc","insertId","findOne","forEach","cb","clone"],"mappings":"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","file":"/packages/dburles_factory.js","sourcesContent":["/* global LocalCollection */\n/* global Factory:true */\n\nconst factories = {};\n\nFactory = class Factory {\n  constructor(name, collection, attributes) {\n    this.name = name;\n    this.collection = collection;\n    this.attributes = attributes;\n    this.afterHooks = [];\n    this.sequence = 0;\n  }\n\n  after(fn) {\n    this.afterHooks.push(fn);\n    return this;\n  }\n};\n\nFactory.define = (name, collection, attributes) => {\n  factories[name] = new Factory(name, collection, attributes);\n  return factories[name];\n};\n\nFactory.get = name => {\n  const factory = factories[name];\n  if (! factory) {\n    throw new Error(\"Factory: There is no factory named \" + name);\n  }\n  return factory;\n};\n\nFactory._build = (name, attributes = {}, userOptions = {}, options = {}) => {\n  const factory = Factory.get(name);\n  const result = {};\n\n  // \"raw\" attributes without functions evaluated, or dotted properties resolved\n  const extendedAttributes = _.extend({}, factory.attributes, attributes);\n\n  // either create a new factory and return its _id\n  // or return a 'fake' _id (since we're not inserting anything)\n  const makeRelation = relName => {\n    if (options.insert) {\n      return Factory.create(relName, {}, userOptions)._id;\n    }\n    if (options.tree) {\n      return Factory._build(relName, {}, userOptions, {tree: true});\n    }\n    // fake an id on build\n    return Random.id();\n  };\n\n  const getValue = value => {\n    return (value instanceof Factory) ? makeRelation(value.name) : value;\n  };\n\n  const getValueFromFunction = func => {\n    const api = { sequence: fn => fn(factory.sequence) };\n    const fnRes = func.call(result, api, userOptions);\n    return getValue(fnRes);\n  };\n\n  factory.sequence += 1;\n\n  const walk = (record, object) => {\n    _.each(object, (value, key) => {\n      let newValue = value;\n      // is this a Factory instance?\n      if (value instanceof Factory) {\n        newValue = makeRelation(value.name);\n      } else if (_.isArray(value)) {\n        newValue = value.map(element => {\n          if (_.isFunction(element)) {\n            return getValueFromFunction(element);\n          }\n          return getValue(element);\n        });\n      } else if (_.isFunction(value)) {\n        newValue = getValueFromFunction(value);\n      // if an object literal is passed in, traverse deeper into it\n      } else if (Object.prototype.toString.call(value) === '[object Object]') {\n        record[key] = record[key] || {};\n        return walk(record[key], value);\n      }\n\n      const modifier = {$set: {}};\n\n      if (key !== '_id') {\n        modifier.$set[key] = newValue;\n      }\n\n      LocalCollection._modify(record, modifier);\n    });\n  };\n\n  walk(result, extendedAttributes);\n\n  if (! options.tree) {\n    result._id = extendedAttributes._id || Random.id();\n  }\n  return result;\n};\n\nFactory.build = (name, attributes = {}, userOptions = {}) => {\n  return Factory._build(name, attributes, userOptions);\n};\n\nFactory.tree = (name, attributes, userOptions = {}) => {\n  return Factory._build(name, attributes, userOptions, {tree: true});\n};\n\nFactory._create = (name, doc) => {\n  const collection = Factory.get(name).collection;\n  const insertId = collection.insert(doc);\n  const record = collection.findOne(insertId);\n  return record;\n};\n\nFactory.create = (name, attributes = {}, userOptions = {}) => {\n  const doc = Factory._build(name, attributes, userOptions, {insert: true});\n  const record = Factory._create(name, doc);\n\n  Factory.get(name).afterHooks.forEach(cb => cb(record));\n\n  return record;\n};\n\nFactory.extend = (name, attributes = {}) => {\n  return _.extend(_.clone(Factory.get(name).attributes), attributes);\n};\n"]}}]