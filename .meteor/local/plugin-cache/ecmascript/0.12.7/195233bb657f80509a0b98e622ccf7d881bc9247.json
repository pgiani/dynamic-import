{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/pgiani/www/meteor-example-optimize-client-bundle/packages/mongo/mongo_driver.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/mongo/mongo_driver.js","filename":"/Users/pgiani/www/meteor-example-optimize-client-bundle/packages/mongo/mongo_driver.js","passPerPreset":false,"envName":"development","cwd":"/Users/pgiani/www/meteor-example-optimize-client-bundle","root":"/Users/pgiani/www/meteor-example-optimize-client-bundle","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/pgiani/www/meteor-example-optimize-client-bundle/packages/mongo/mongo_driver.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mongo/mongo_driver.js"}},"code":"const module1 = module;\nlet DocFetcher;\nmodule1.link(\"./doc_fetcher.js\", {\n  DocFetcher(v) {\n    DocFetcher = v;\n  }\n\n}, 0);\n\n/**\n * Provide a synchronous Collection API using fibers, backed by\n * MongoDB.  This is only for use on the server, and mostly identical\n * to the client API.\n *\n * NOTE: the public API methods must be run within a fiber. If you call\n * these outside of a fiber they will explode!\n */\nvar MongoDB = NpmModuleMongodb;\n\nvar Future = Npm.require('fibers/future');\n\nMongoInternals = {};\nMongoInternals.NpmModules = {\n  mongodb: {\n    version: NpmModuleMongodbVersion,\n    module: MongoDB\n  }\n}; // Older version of what is now available via\n// MongoInternals.NpmModules.mongodb.module.  It was never documented, but\n// people do use it.\n// XXX COMPAT WITH 1.0.3.2\n\nMongoInternals.NpmModule = MongoDB; // This is used to add or remove EJSON from the beginning of everything nested\n// inside an EJSON custom type. It should only be called on pure JSON!\n\nvar replaceNames = function (filter, thing) {\n  if (typeof thing === \"object\" && thing !== null) {\n    if (_.isArray(thing)) {\n      return _.map(thing, _.bind(replaceNames, null, filter));\n    }\n\n    var ret = {};\n\n    _.each(thing, function (value, key) {\n      ret[filter(key)] = replaceNames(filter, value);\n    });\n\n    return ret;\n  }\n\n  return thing;\n}; // Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just\n// doing a structural clone).\n// XXX how ok is this? what if there are multiple copies of MongoDB loaded?\n\n\nMongoDB.Timestamp.prototype.clone = function () {\n  // Timestamps should be immutable.\n  return this;\n};\n\nvar makeMongoLegal = function (name) {\n  return \"EJSON\" + name;\n};\n\nvar unmakeMongoLegal = function (name) {\n  return name.substr(5);\n};\n\nvar replaceMongoAtomWithMeteor = function (document) {\n  if (document instanceof MongoDB.Binary) {\n    var buffer = document.value(true);\n    return new Uint8Array(buffer);\n  }\n\n  if (document instanceof MongoDB.ObjectID) {\n    return new Mongo.ObjectID(document.toHexString());\n  }\n\n  if (document instanceof MongoDB.Decimal128) {\n    return Decimal(document.toString());\n  }\n\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"] && _.size(document) === 2) {\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));\n  }\n\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n\n  return undefined;\n};\n\nvar replaceMeteorAtomWithMongo = function (document) {\n  if (EJSON.isBinary(document)) {\n    // This does more copies than we'd like, but is necessary because\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually\n    // serialize it correctly).\n    return new MongoDB.Binary(Buffer.from(document));\n  }\n\n  if (document instanceof Mongo.ObjectID) {\n    return new MongoDB.ObjectID(document.toHexString());\n  }\n\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n\n  if (document instanceof Decimal) {\n    return MongoDB.Decimal128.fromString(document.toString());\n  }\n\n  if (EJSON._isCustomType(document)) {\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));\n  } // It is not ordinarily possible to stick dollar-sign keys into mongo\n  // so we don't bother checking for things that need escaping at this time.\n\n\n  return undefined;\n};\n\nvar replaceTypes = function (document, atomTransformer) {\n  if (typeof document !== 'object' || document === null) return document;\n  var replacedTopLevelAtom = atomTransformer(document);\n  if (replacedTopLevelAtom !== undefined) return replacedTopLevelAtom;\n  var ret = document;\n\n  _.each(document, function (val, key) {\n    var valReplaced = replaceTypes(val, atomTransformer);\n\n    if (val !== valReplaced) {\n      // Lazy clone. Shallow copy.\n      if (ret === document) ret = _.clone(document);\n      ret[key] = valReplaced;\n    }\n  });\n\n  return ret;\n};\n\nMongoConnection = function (url, options) {\n  var self = this;\n  options = options || {};\n  self._observeMultiplexers = {};\n  self._onFailoverHook = new Hook();\n  var mongoOptions = Object.assign({\n    // Reconnect on error.\n    autoReconnect: true,\n    // Try to reconnect forever, instead of stopping after 30 tries (the\n    // default), with each attempt separated by 1000ms.\n    reconnectTries: Infinity,\n    ignoreUndefined: true,\n    // Required to silence deprecation warnings with mongodb@3.1.1.\n    useNewUrlParser: true\n  }, Mongo._connectionOptions); // Disable the native parser by default, unless specifically enabled\n  // in the mongo URL.\n  // - The native driver can cause errors which normally would be\n  //   thrown, caught, and handled into segfaults that take down the\n  //   whole app.\n  // - Binary modules don't yet work when you bundle and move the bundle\n  //   to a different platform (aka deploy)\n  // We should revisit this after binary npm module support lands.\n\n  if (!/[\\?&]native_?[pP]arser=/.test(url)) {\n    mongoOptions.native_parser = false;\n  } // Internally the oplog connections specify their own poolSize\n  // which we don't want to overwrite with any user defined value\n\n\n  if (_.has(options, 'poolSize')) {\n    // If we just set this for \"server\", replSet will override it. If we just\n    // set it for replSet, it will be ignored if we're not using a replSet.\n    mongoOptions.poolSize = options.poolSize;\n  }\n\n  self.db = null; // We keep track of the ReplSet's primary, so that we can trigger hooks when\n  // it changes.  The Node driver's joined callback seems to fire way too\n  // often, which is why we need to track it ourselves.\n\n  self._primary = null;\n  self._oplogHandle = null;\n  self._docFetcher = null;\n  var connectFuture = new Future();\n  MongoDB.connect(url, mongoOptions, Meteor.bindEnvironment(function (err, client) {\n    if (err) {\n      throw err;\n    }\n\n    var db = client.db(); // First, figure out what the current primary is, if any.\n\n    if (db.serverConfig.isMasterDoc) {\n      self._primary = db.serverConfig.isMasterDoc.primary;\n    }\n\n    db.serverConfig.on('joined', Meteor.bindEnvironment(function (kind, doc) {\n      if (kind === 'primary') {\n        if (doc.primary !== self._primary) {\n          self._primary = doc.primary;\n\n          self._onFailoverHook.each(function (callback) {\n            callback();\n            return true;\n          });\n        }\n      } else if (doc.me === self._primary) {\n        // The thing we thought was primary is now something other than\n        // primary.  Forget that we thought it was primary.  (This means\n        // that if a server stops being primary and then starts being\n        // primary again without another server becoming primary in the\n        // middle, we'll correctly count it as a failover.)\n        self._primary = null;\n      }\n    })); // Allow the constructor to return.\n\n    connectFuture['return']({\n      client,\n      db\n    });\n  }, connectFuture.resolver() // onException\n  )); // Wait for the connection to be successful (throws on failure) and assign the\n  // results (`client` and `db`) to `self`.\n\n  Object.assign(self, connectFuture.wait());\n\n  if (options.oplogUrl && !Package['disable-oplog']) {\n    self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);\n    self._docFetcher = new DocFetcher(self);\n  }\n};\n\nMongoConnection.prototype.close = function () {\n  var self = this;\n  if (!self.db) throw Error(\"close called before Connection created?\"); // XXX probably untested\n\n  var oplogHandle = self._oplogHandle;\n  self._oplogHandle = null;\n  if (oplogHandle) oplogHandle.stop(); // Use Future.wrap so that errors get thrown. This happens to\n  // work even outside a fiber since the 'close' method is not\n  // actually asynchronous.\n\n  Future.wrap(_.bind(self.client.close, self.client))(true).wait();\n}; // Returns the Mongo Collection object; may yield.\n\n\nMongoConnection.prototype.rawCollection = function (collectionName) {\n  var self = this;\n  if (!self.db) throw Error(\"rawCollection called before Connection created?\");\n  var future = new Future();\n  self.db.collection(collectionName, future.resolver());\n  return future.wait();\n};\n\nMongoConnection.prototype._createCappedCollection = function (collectionName, byteSize, maxDocuments) {\n  var self = this;\n  if (!self.db) throw Error(\"_createCappedCollection called before Connection created?\");\n  var future = new Future();\n  self.db.createCollection(collectionName, {\n    capped: true,\n    size: byteSize,\n    max: maxDocuments\n  }, future.resolver());\n  future.wait();\n}; // This should be called synchronously with a write, to create a\n// transaction on the current write fence, if any. After we can read\n// the write, and after observers have been notified (or at least,\n// after the observer notifiers have added themselves to the write\n// fence), you should call 'committed()' on the object returned.\n\n\nMongoConnection.prototype._maybeBeginWrite = function () {\n  var fence = DDPServer._CurrentWriteFence.get();\n\n  if (fence) {\n    return fence.beginWrite();\n  } else {\n    return {\n      committed: function () {}\n    };\n  }\n}; // Internal interface: adds a callback which is called when the Mongo primary\n// changes. Returns a stop handle.\n\n\nMongoConnection.prototype._onFailover = function (callback) {\n  return this._onFailoverHook.register(callback);\n}; //////////// Public API //////////\n// The write methods block until the database has confirmed the write (it may\n// not be replicated or stable on disk, but one server has confirmed it) if no\n// callback is provided. If a callback is provided, then they call the callback\n// when the write is confirmed. They return nothing on success, and raise an\n// exception on failure.\n//\n// After making a write (with insert, update, remove), observers are\n// notified asynchronously. If you want to receive a callback once all\n// of the observer notifications have landed for your write, do the\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new\n// _WriteFence, and then set a callback on the write fence.)\n//\n// Since our execution environment is single-threaded, this is\n// well-defined -- a write \"has been made\" if it's returned, and an\n// observer \"has been notified\" if its callback has returned.\n\n\nvar writeCallback = function (write, refresh, callback) {\n  return function (err, result) {\n    if (!err) {\n      // XXX We don't have to run this on error, right?\n      try {\n        refresh();\n      } catch (refreshErr) {\n        if (callback) {\n          callback(refreshErr);\n          return;\n        } else {\n          throw refreshErr;\n        }\n      }\n    }\n\n    write.committed();\n\n    if (callback) {\n      callback(err, result);\n    } else if (err) {\n      throw err;\n    }\n  };\n};\n\nvar bindEnvironmentForWrite = function (callback) {\n  return Meteor.bindEnvironment(callback, \"Mongo write\");\n};\n\nMongoConnection.prototype._insert = function (collection_name, document, callback) {\n  var self = this;\n\n  var sendError = function (e) {\n    if (callback) return callback(e);\n    throw e;\n  };\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e._expectedByTest = true;\n    sendError(e);\n    return;\n  }\n\n  if (!(LocalCollection._isPlainObject(document) && !EJSON._isCustomType(document))) {\n    sendError(new Error(\"Only plain objects may be inserted into MongoDB\"));\n    return;\n  }\n\n  var write = self._maybeBeginWrite();\n\n  var refresh = function () {\n    Meteor.refresh({\n      collection: collection_name,\n      id: document._id\n    });\n  };\n\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.insert(replaceTypes(document, replaceMeteorAtomWithMongo), {\n      safe: true\n    }, callback);\n  } catch (err) {\n    write.committed();\n    throw err;\n  }\n}; // Cause queries that may be affected by the selector to poll in this write\n// fence.\n\n\nMongoConnection.prototype._refresh = function (collectionName, selector) {\n  var refreshKey = {\n    collection: collectionName\n  }; // If we know which documents we're removing, don't poll queries that are\n  // specific to other documents. (Note that multiple notifications here should\n  // not cause multiple polls, since all our listener is doing is enqueueing a\n  // poll.)\n\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      Meteor.refresh(_.extend({\n        id: id\n      }, refreshKey));\n    });\n  } else {\n    Meteor.refresh(refreshKey);\n  }\n};\n\nMongoConnection.prototype._remove = function (collection_name, selector, callback) {\n  var self = this;\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e._expectedByTest = true;\n\n    if (callback) {\n      return callback(e);\n    } else {\n      throw e;\n    }\n  }\n\n  var write = self._maybeBeginWrite();\n\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n\n  try {\n    var collection = self.rawCollection(collection_name);\n\n    var wrappedCallback = function (err, driverResult) {\n      callback(err, transformResult(driverResult).numberAffected);\n    };\n\n    collection.remove(replaceTypes(selector, replaceMeteorAtomWithMongo), {\n      safe: true\n    }, wrappedCallback);\n  } catch (err) {\n    write.committed();\n    throw err;\n  }\n};\n\nMongoConnection.prototype._dropCollection = function (collectionName, cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n\n  var refresh = function () {\n    Meteor.refresh({\n      collection: collectionName,\n      id: null,\n      dropCollection: true\n    });\n  };\n\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    var collection = self.rawCollection(collectionName);\n    collection.drop(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n}; // For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`\n// because it lets the test's fence wait for it to be complete.\n\n\nMongoConnection.prototype._dropDatabase = function (cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n\n  var refresh = function () {\n    Meteor.refresh({\n      dropDatabase: true\n    });\n  };\n\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    self.db.dropDatabase(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._update = function (collection_name, selector, mod, options, callback) {\n  var self = this;\n\n  if (!callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e._expectedByTest = true;\n\n    if (callback) {\n      return callback(e);\n    } else {\n      throw e;\n    }\n  } // explicit safety check. null and undefined can crash the mongo\n  // driver. Although the node driver and minimongo do 'support'\n  // non-object modifier in that they don't crash, they are not\n  // meaningful operations and do not do anything. Defensively throw an\n  // error here.\n\n\n  if (!mod || typeof mod !== 'object') throw new Error(\"Invalid modifier. Modifier must be an object.\");\n\n  if (!(LocalCollection._isPlainObject(mod) && !EJSON._isCustomType(mod))) {\n    throw new Error(\"Only plain objects may be used as replacement\" + \" documents in MongoDB\");\n  }\n\n  if (!options) options = {};\n\n  var write = self._maybeBeginWrite();\n\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n\n  callback = writeCallback(write, refresh, callback);\n\n  try {\n    var collection = self.rawCollection(collection_name);\n    var mongoOpts = {\n      safe: true\n    }; // explictly enumerate options that minimongo supports\n\n    if (options.upsert) mongoOpts.upsert = true;\n    if (options.multi) mongoOpts.multi = true; // Lets you get a more more full result from MongoDB. Use with caution:\n    // might not work with C.upsert (as opposed to C.update({upsert:true}) or\n    // with simulated upsert.\n\n    if (options.fullResult) mongoOpts.fullResult = true;\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);\n\n    var isModify = LocalCollection._isModificationMod(mongoMod);\n\n    if (options._forbidReplace && !isModify) {\n      var err = new Error(\"Invalid modifier. Replacements are forbidden.\");\n\n      if (callback) {\n        return callback(err);\n      } else {\n        throw err;\n      }\n    } // We've already run replaceTypes/replaceMeteorAtomWithMongo on\n    // selector and mod.  We assume it doesn't matter, as far as\n    // the behavior of modifiers is concerned, whether `_modify`\n    // is run on EJSON or on mongo-converted EJSON.\n    // Run this code up front so that it fails fast if someone uses\n    // a Mongo update operator we don't support.\n\n\n    let knownId;\n\n    if (options.upsert) {\n      try {\n        let newDoc = LocalCollection._createUpsertDocument(selector, mod);\n\n        knownId = newDoc._id;\n      } catch (err) {\n        if (callback) {\n          return callback(err);\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    if (options.upsert && !isModify && !knownId && options.insertedId && !(options.insertedId instanceof Mongo.ObjectID && options.generatedId)) {\n      // In case of an upsert with a replacement, where there is no _id defined\n      // in either the query or the replacement doc, mongo will generate an id itself.\n      // Therefore we need this special strategy if we want to control the id ourselves.\n      // We don't need to do this when:\n      // - This is not a replacement, so we can add an _id to $setOnInsert\n      // - The id is defined by query or mod we can just add it to the replacement doc\n      // - The user did not specify any id preference and the id is a Mongo ObjectId,\n      //     then we can just let Mongo generate the id\n      simulateUpsertWithInsertedId(collection, mongoSelector, mongoMod, options, // This callback does not need to be bindEnvironment'ed because\n      // simulateUpsertWithInsertedId() wraps it and then passes it through\n      // bindEnvironmentForWrite.\n      function (error, result) {\n        // If we got here via a upsert() call, then options._returnObject will\n        // be set and we should return the whole object. Otherwise, we should\n        // just return the number of affected docs to match the mongo API.\n        if (result && !options._returnObject) {\n          callback(error, result.numberAffected);\n        } else {\n          callback(error, result);\n        }\n      });\n    } else {\n      if (options.upsert && !knownId && options.insertedId && isModify) {\n        if (!mongoMod.hasOwnProperty('$setOnInsert')) {\n          mongoMod.$setOnInsert = {};\n        }\n\n        knownId = options.insertedId;\n        Object.assign(mongoMod.$setOnInsert, replaceTypes({\n          _id: options.insertedId\n        }, replaceMeteorAtomWithMongo));\n      }\n\n      collection.update(mongoSelector, mongoMod, mongoOpts, bindEnvironmentForWrite(function (err, result) {\n        if (!err) {\n          var meteorResult = transformResult(result);\n\n          if (meteorResult && options._returnObject) {\n            // If this was an upsert() call, and we ended up\n            // inserting a new doc and we know its id, then\n            // return that id as well.\n            if (options.upsert && meteorResult.insertedId) {\n              if (knownId) {\n                meteorResult.insertedId = knownId;\n              } else if (meteorResult.insertedId instanceof MongoDB.ObjectID) {\n                meteorResult.insertedId = new Mongo.ObjectID(meteorResult.insertedId.toHexString());\n              }\n            }\n\n            callback(err, meteorResult);\n          } else {\n            callback(err, meteorResult.numberAffected);\n          }\n        } else {\n          callback(err);\n        }\n      }));\n    }\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nvar transformResult = function (driverResult) {\n  var meteorResult = {\n    numberAffected: 0\n  };\n\n  if (driverResult) {\n    var mongoResult = driverResult.result; // On updates with upsert:true, the inserted values come as a list of\n    // upserted values -- even with options.multi, when the upsert does insert,\n    // it only inserts one element.\n\n    if (mongoResult.upserted) {\n      meteorResult.numberAffected += mongoResult.upserted.length;\n\n      if (mongoResult.upserted.length == 1) {\n        meteorResult.insertedId = mongoResult.upserted[0]._id;\n      }\n    } else {\n      meteorResult.numberAffected = mongoResult.n;\n    }\n  }\n\n  return meteorResult;\n};\n\nvar NUM_OPTIMISTIC_TRIES = 3; // exposed for testing\n\nMongoConnection._isCannotChangeIdError = function (err) {\n  // Mongo 3.2.* returns error as next Object:\n  // {name: String, code: Number, errmsg: String}\n  // Older Mongo returns:\n  // {name: String, code: Number, err: String}\n  var error = err.errmsg || err.err; // We don't use the error code here\n  // because the error code we observed it producing (16837) appears to be\n  // a far more generic error code based on examining the source.\n\n  if (error.indexOf('The _id field cannot be changed') === 0 || error.indexOf(\"the (immutable) field '_id' was found to have been altered to _id\") !== -1) {\n    return true;\n  }\n\n  return false;\n};\n\nvar simulateUpsertWithInsertedId = function (collection, selector, mod, options, callback) {\n  // STRATEGY: First try doing an upsert with a generated ID.\n  // If this throws an error about changing the ID on an existing document\n  // then without affecting the database, we know we should probably try\n  // an update without the generated ID. If it affected 0 documents,\n  // then without affecting the database, we the document that first\n  // gave the error is probably removed and we need to try an insert again\n  // We go back to step one and repeat.\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's\n  // unlikely our writes will continue to be interfered with under normal\n  // circumstances (though sufficiently heavy contention with writers\n  // disagreeing on the existence of an object will cause writes to fail\n  // in theory).\n  var insertedId = options.insertedId; // must exist\n\n  var mongoOptsForUpdate = {\n    safe: true,\n    multi: options.multi\n  };\n  var mongoOptsForInsert = {\n    safe: true,\n    upsert: true\n  };\n  var replacementWithId = Object.assign(replaceTypes({\n    _id: insertedId\n  }, replaceMeteorAtomWithMongo), mod);\n  var tries = NUM_OPTIMISTIC_TRIES;\n\n  var doUpdate = function () {\n    tries--;\n\n    if (!tries) {\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));\n    } else {\n      collection.update(selector, mod, mongoOptsForUpdate, bindEnvironmentForWrite(function (err, result) {\n        if (err) {\n          callback(err);\n        } else if (result && result.result.n != 0) {\n          callback(null, {\n            numberAffected: result.result.n\n          });\n        } else {\n          doConditionalInsert();\n        }\n      }));\n    }\n  };\n\n  var doConditionalInsert = function () {\n    collection.update(selector, replacementWithId, mongoOptsForInsert, bindEnvironmentForWrite(function (err, result) {\n      if (err) {\n        // figure out if this is a\n        // \"cannot change _id of document\" error, and\n        // if so, try doUpdate() again, up to 3 times.\n        if (MongoConnection._isCannotChangeIdError(err)) {\n          doUpdate();\n        } else {\n          callback(err);\n        }\n      } else {\n        callback(null, {\n          numberAffected: result.result.upserted.length,\n          insertedId: insertedId\n        });\n      }\n    }));\n  };\n\n  doUpdate();\n};\n\n_.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {\n  MongoConnection.prototype[method] = function ()\n  /* arguments */\n  {\n    var self = this;\n    return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);\n  };\n}); // XXX MongoConnection.upsert() does not return the id of the inserted document\n// unless you set it explicitly in the selector or modifier (as a replacement\n// doc).\n\n\nMongoConnection.prototype.upsert = function (collectionName, selector, mod, options, callback) {\n  var self = this;\n\n  if (typeof options === \"function\" && !callback) {\n    callback = options;\n    options = {};\n  }\n\n  return self.update(collectionName, selector, mod, _.extend({}, options, {\n    upsert: true,\n    _returnObject: true\n  }), callback);\n};\n\nMongoConnection.prototype.find = function (collectionName, selector, options) {\n  var self = this;\n  if (arguments.length === 1) selector = {};\n  return new Cursor(self, new CursorDescription(collectionName, selector, options));\n};\n\nMongoConnection.prototype.findOne = function (collection_name, selector, options) {\n  var self = this;\n  if (arguments.length === 1) selector = {};\n  options = options || {};\n  options.limit = 1;\n  return self.find(collection_name, selector, options).fetch()[0];\n}; // We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\n\n\nMongoConnection.prototype._ensureIndex = function (collectionName, index, options) {\n  var self = this; // We expect this function to be called at startup, not from within a method,\n  // so we don't interact with the write fence.\n\n  var collection = self.rawCollection(collectionName);\n  var future = new Future();\n  var indexName = collection.ensureIndex(index, options, future.resolver());\n  future.wait();\n};\n\nMongoConnection.prototype._dropIndex = function (collectionName, index) {\n  var self = this; // This function is only used by test code, not within a method, so we don't\n  // interact with the write fence.\n\n  var collection = self.rawCollection(collectionName);\n  var future = new Future();\n  var indexName = collection.dropIndex(index, future.resolver());\n  future.wait();\n}; // CURSORS\n// There are several classes which relate to cursors:\n//\n// CursorDescription represents the arguments used to construct a cursor:\n// collectionName, selector, and (find) options.  Because it is used as a key\n// for cursor de-dup, everything in it should either be JSON-stringifiable or\n// not affect observeChanges output (eg, options.transform functions are not\n// stringifiable but do not affect observeChanges).\n//\n// SynchronousCursor is a wrapper around a MongoDB cursor\n// which includes fully-synchronous versions of forEach, etc.\n//\n// Cursor is the cursor object returned from find(), which implements the\n// documented Mongo.Collection cursor API.  It wraps a CursorDescription and a\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method\n// like fetch or forEach on it).\n//\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a\n// reference to an ObserveMultiplexer.\n//\n// ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a\n// single observe driver.\n//\n// There are two \"observe drivers\" which drive ObserveMultiplexers:\n//   - PollingObserveDriver caches the results of a query and reruns it when\n//     necessary.\n//   - OplogObserveDriver follows the Mongo operation log to directly observe\n//     database changes.\n// Both implementations follow the same simple interface: when you create them,\n// they start sending observeChanges callbacks (and a ready() invocation) to\n// their ObserveMultiplexer, and you stop them by calling their stop() method.\n\n\nCursorDescription = function (collectionName, selector, options) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.selector = Mongo.Collection._rewriteSelector(selector);\n  self.options = options || {};\n};\n\nCursor = function (mongo, cursorDescription) {\n  var self = this;\n  self._mongo = mongo;\n  self._cursorDescription = cursorDescription;\n  self._synchronousCursor = null;\n};\n\n_.each(['forEach', 'map', 'fetch', 'count', Symbol.iterator], function (method) {\n  Cursor.prototype[method] = function () {\n    var self = this; // You can only observe a tailable cursor.\n\n    if (self._cursorDescription.options.tailable) throw new Error(\"Cannot call \" + method + \" on a tailable cursor\");\n\n    if (!self._synchronousCursor) {\n      self._synchronousCursor = self._mongo._createSynchronousCursor(self._cursorDescription, {\n        // Make sure that the \"self\" argument to forEach/map callbacks is the\n        // Cursor, not the SynchronousCursor.\n        selfForIteration: self,\n        useTransform: true\n      });\n    }\n\n    return self._synchronousCursor[method].apply(self._synchronousCursor, arguments);\n  };\n}); // Since we don't actually have a \"nextObject\" interface, there's really no\n// reason to have a \"rewind\" interface.  All it did was make multiple calls\n// to fetch/map/forEach return nothing the second time.\n// XXX COMPAT WITH 0.8.1\n\n\nCursor.prototype.rewind = function () {};\n\nCursor.prototype.getTransform = function () {\n  return this._cursorDescription.options.transform;\n}; // When you call Meteor.publish() with a function that returns a Cursor, we need\n// to transmute it into the equivalent subscription.  This is the function that\n// does that.\n\n\nCursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  var collection = self._cursorDescription.collectionName;\n  return Mongo.Collection._publishCursor(self, sub, collection);\n}; // Used to guarantee that publish functions return at most one cursor per\n// collection. Private, because we might later have cursors that include\n// documents from multiple collections somehow.\n\n\nCursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self._cursorDescription.collectionName;\n};\n\nCursor.prototype.observe = function (callbacks) {\n  var self = this;\n  return LocalCollection._observeFromObserveChanges(self, callbacks);\n};\n\nCursor.prototype.observeChanges = function (callbacks) {\n  var self = this;\n  var methods = ['addedAt', 'added', 'changedAt', 'changed', 'removedAt', 'removed', 'movedTo'];\n\n  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks); // XXX: Can we find out if callbacks are from observe?\n\n\n  var exceptionName = ' observe/observeChanges callback';\n  methods.forEach(function (method) {\n    if (callbacks[method] && typeof callbacks[method] == \"function\") {\n      callbacks[method] = Meteor.bindEnvironment(callbacks[method], method + exceptionName);\n    }\n  });\n  return self._mongo._observeChanges(self._cursorDescription, ordered, callbacks);\n};\n\nMongoConnection.prototype._createSynchronousCursor = function (cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n  var collection = self.rawCollection(cursorDescription.collectionName);\n  var cursorOptions = cursorDescription.options;\n  var mongoOptions = {\n    sort: cursorOptions.sort,\n    limit: cursorOptions.limit,\n    skip: cursorOptions.skip,\n    projection: cursorOptions.fields\n  }; // Do we want a tailable cursor (which only works on capped collections)?\n\n  if (cursorOptions.tailable) {\n    // We want a tailable cursor...\n    mongoOptions.tailable = true; // ... and for the server to wait a bit if any getMore has no data (rather\n    // than making us put the relevant sleeps in the client)...\n\n    mongoOptions.awaitdata = true; // ... and to keep querying the server indefinitely rather than just 5 times\n    // if there's no more data.\n\n    mongoOptions.numberOfRetries = -1; // And if this is on the oplog collection and the cursor specifies a 'ts',\n    // then set the undocumented oplog replay flag, which does a special scan to\n    // find the first document (instead of creating an index on ts). This is a\n    // very hard-coded Mongo flag which only works on the oplog collection and\n    // only works with the ts field.\n\n    if (cursorDescription.collectionName === OPLOG_COLLECTION && cursorDescription.selector.ts) {\n      mongoOptions.oplogReplay = true;\n    }\n  }\n\n  var dbCursor = collection.find(replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo), mongoOptions);\n\n  if (typeof cursorOptions.maxTimeMs !== 'undefined') {\n    dbCursor = dbCursor.maxTimeMS(cursorOptions.maxTimeMs);\n  }\n\n  if (typeof cursorOptions.hint !== 'undefined') {\n    dbCursor = dbCursor.hint(cursorOptions.hint);\n  }\n\n  return new SynchronousCursor(dbCursor, cursorDescription, options);\n};\n\nvar SynchronousCursor = function (dbCursor, cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n  self._dbCursor = dbCursor;\n  self._cursorDescription = cursorDescription; // The \"self\" argument passed to forEach/map callbacks. If we're wrapped\n  // inside a user-visible Cursor, we want to provide the outer cursor!\n\n  self._selfForIteration = options.selfForIteration || self;\n\n  if (options.useTransform && cursorDescription.options.transform) {\n    self._transform = LocalCollection.wrapTransform(cursorDescription.options.transform);\n  } else {\n    self._transform = null;\n  }\n\n  self._synchronousCount = Future.wrap(dbCursor.count.bind(dbCursor));\n  self._visitedIds = new LocalCollection._IdMap();\n};\n\n_.extend(SynchronousCursor.prototype, {\n  // Returns a Promise for the next object from the underlying cursor (before\n  // the Mongo->Meteor type replacement).\n  _rawNextObjectPromise: function () {\n    const self = this;\n    return new Promise((resolve, reject) => {\n      self._dbCursor.next((err, doc) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(doc);\n        }\n      });\n    });\n  },\n  // Returns a Promise for the next object from the cursor, skipping those whose\n  // IDs we've already seen and replacing Mongo atoms with Meteor atoms.\n  _nextObjectPromise: function () {\n    return Promise.asyncApply(() => {\n      var self = this;\n\n      while (true) {\n        var doc = Promise.await(self._rawNextObjectPromise());\n        if (!doc) return null;\n        doc = replaceTypes(doc, replaceMongoAtomWithMeteor);\n\n        if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {\n          // Did Mongo give us duplicate documents in the same cursor? If so,\n          // ignore this one. (Do this before the transform, since transform might\n          // return some unrelated value.) We don't do this for tailable cursors,\n          // because we want to maintain O(1) memory usage. And if there isn't _id\n          // for some reason (maybe it's the oplog), then we don't do this either.\n          // (Be careful to do this for falsey but existing _id, though.)\n          if (self._visitedIds.has(doc._id)) continue;\n\n          self._visitedIds.set(doc._id, true);\n        }\n\n        if (self._transform) doc = self._transform(doc);\n        return doc;\n      }\n    });\n  },\n  // Returns a promise which is resolved with the next object (like with\n  // _nextObjectPromise) or rejected if the cursor doesn't return within\n  // timeoutMS ms.\n  _nextObjectPromiseWithTimeout: function (timeoutMS) {\n    const self = this;\n\n    if (!timeoutMS) {\n      return self._nextObjectPromise();\n    }\n\n    const nextObjectPromise = self._nextObjectPromise();\n\n    const timeoutErr = new Error('Client-side timeout waiting for next object');\n    const timeoutPromise = new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        reject(timeoutErr);\n      }, timeoutMS);\n    });\n    return Promise.race([nextObjectPromise, timeoutPromise]).catch(err => {\n      if (err === timeoutErr) {\n        self.close();\n      }\n\n      throw err;\n    });\n  },\n  _nextObject: function () {\n    var self = this;\n    return self._nextObjectPromise().await();\n  },\n  forEach: function (callback, thisArg) {\n    var self = this; // Get back to the beginning.\n\n    self._rewind(); // We implement the loop ourself instead of using self._dbCursor.each,\n    // because \"each\" will call its callback outside of a fiber which makes it\n    // much more complex to make this function synchronous.\n\n\n    var index = 0;\n\n    while (true) {\n      var doc = self._nextObject();\n\n      if (!doc) return;\n      callback.call(thisArg, doc, index++, self._selfForIteration);\n    }\n  },\n  // XXX Allow overlapping callback executions if callback yields.\n  map: function (callback, thisArg) {\n    var self = this;\n    var res = [];\n    self.forEach(function (doc, index) {\n      res.push(callback.call(thisArg, doc, index, self._selfForIteration));\n    });\n    return res;\n  },\n  _rewind: function () {\n    var self = this; // known to be synchronous\n\n    self._dbCursor.rewind();\n\n    self._visitedIds = new LocalCollection._IdMap();\n  },\n  // Mostly usable for tailable cursors.\n  close: function () {\n    var self = this;\n\n    self._dbCursor.close();\n  },\n  fetch: function () {\n    var self = this;\n    return self.map(_.identity);\n  },\n  count: function (applySkipLimit = false) {\n    var self = this;\n    return self._synchronousCount(applySkipLimit).wait();\n  },\n  // This method is NOT wrapped in Cursor.\n  getRawObjects: function (ordered) {\n    var self = this;\n\n    if (ordered) {\n      return self.fetch();\n    } else {\n      var results = new LocalCollection._IdMap();\n      self.forEach(function (doc) {\n        results.set(doc._id, doc);\n      });\n      return results;\n    }\n  }\n});\n\nSynchronousCursor.prototype[Symbol.iterator] = function () {\n  var self = this; // Get back to the beginning.\n\n  self._rewind();\n\n  return {\n    next() {\n      const doc = self._nextObject();\n\n      return doc ? {\n        value: doc\n      } : {\n        done: true\n      };\n    }\n\n  };\n}; // Tails the cursor described by cursorDescription, most likely on the\n// oplog. Calls docCallback with each document found. Ignores errors and just\n// restarts the tail on error.\n//\n// If timeoutMS is set, then if we don't get a new document every timeoutMS,\n// kill and restart the cursor. This is primarily a workaround for #8598.\n\n\nMongoConnection.prototype.tail = function (cursorDescription, docCallback, timeoutMS) {\n  var self = this;\n  if (!cursorDescription.options.tailable) throw new Error(\"Can only tail a tailable cursor\");\n\n  var cursor = self._createSynchronousCursor(cursorDescription);\n\n  var stopped = false;\n  var lastTS;\n\n  var loop = function () {\n    var doc = null;\n\n    while (true) {\n      if (stopped) return;\n\n      try {\n        doc = cursor._nextObjectPromiseWithTimeout(timeoutMS).await();\n      } catch (err) {\n        // There's no good way to figure out if this was actually an error from\n        // Mongo, or just client-side (including our own timeout error). Ah\n        // well. But either way, we need to retry the cursor (unless the failure\n        // was because the observe got stopped).\n        doc = null;\n      } // Since we awaited a promise above, we need to check again to see if\n      // we've been stopped before calling the callback.\n\n\n      if (stopped) return;\n\n      if (doc) {\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the\n        // cursor on error. (\"ts\" is a standard that Mongo uses internally for\n        // the oplog, and there's a special flag that lets you do binary search\n        // on it instead of needing to use an index.)\n        lastTS = doc.ts;\n        docCallback(doc);\n      } else {\n        var newSelector = _.clone(cursorDescription.selector);\n\n        if (lastTS) {\n          newSelector.ts = {\n            $gt: lastTS\n          };\n        }\n\n        cursor = self._createSynchronousCursor(new CursorDescription(cursorDescription.collectionName, newSelector, cursorDescription.options)); // Mongo failover takes many seconds.  Retry in a bit.  (Without this\n        // setTimeout, we peg the CPU at 100% and never notice the actual\n        // failover.\n\n        Meteor.setTimeout(loop, 100);\n        break;\n      }\n    }\n  };\n\n  Meteor.defer(loop);\n  return {\n    stop: function () {\n      stopped = true;\n      cursor.close();\n    }\n  };\n};\n\nMongoConnection.prototype._observeChanges = function (cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  if (cursorDescription.options.tailable) {\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);\n  } // You may not filter out _id when observing changes, because the id is a core\n  // part of the observeChanges API.\n\n\n  if (cursorDescription.options.fields && (cursorDescription.options.fields._id === 0 || cursorDescription.options.fields._id === false)) {\n    throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n  }\n\n  var observeKey = EJSON.stringify(_.extend({\n    ordered: ordered\n  }, cursorDescription));\n  var multiplexer, observeDriver;\n  var firstHandle = false; // Find a matching ObserveMultiplexer, or create a new one. This next block is\n  // guaranteed to not yield (and it doesn't call anything that can observe a\n  // new query), so no other calls to this function can interleave with it.\n\n  Meteor._noYieldsAllowed(function () {\n    if (_.has(self._observeMultiplexers, observeKey)) {\n      multiplexer = self._observeMultiplexers[observeKey];\n    } else {\n      firstHandle = true; // Create a new ObserveMultiplexer.\n\n      multiplexer = new ObserveMultiplexer({\n        ordered: ordered,\n        onStop: function () {\n          delete self._observeMultiplexers[observeKey];\n          observeDriver.stop();\n        }\n      });\n      self._observeMultiplexers[observeKey] = multiplexer;\n    }\n  });\n\n  var observeHandle = new ObserveHandle(multiplexer, callbacks);\n\n  if (firstHandle) {\n    var matcher, sorter;\n\n    var canUseOplog = _.all([function () {\n      // At a bare minimum, using the oplog requires us to have an oplog, to\n      // want unordered callbacks, and to not want a callback on the polls\n      // that won't happen.\n      return self._oplogHandle && !ordered && !callbacks._testOnlyPollCallback;\n    }, function () {\n      // We need to be able to compile the selector. Fall back to polling for\n      // some newfangled $selector that minimongo doesn't support yet.\n      try {\n        matcher = new Minimongo.Matcher(cursorDescription.selector);\n        return true;\n      } catch (e) {\n        // XXX make all compilation errors MinimongoError or something\n        //     so that this doesn't ignore unrelated exceptions\n        return false;\n      }\n    }, function () {\n      // ... and the selector itself needs to support oplog.\n      return OplogObserveDriver.cursorSupported(cursorDescription, matcher);\n    }, function () {\n      // And we need to be able to compile the sort, if any.  eg, can't be\n      // {$natural: 1}.\n      if (!cursorDescription.options.sort) return true;\n\n      try {\n        sorter = new Minimongo.Sorter(cursorDescription.options.sort);\n        return true;\n      } catch (e) {\n        // XXX make all compilation errors MinimongoError or something\n        //     so that this doesn't ignore unrelated exceptions\n        return false;\n      }\n    }], function (f) {\n      return f();\n    }); // invoke each function\n\n\n    var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;\n    observeDriver = new driverClass({\n      cursorDescription: cursorDescription,\n      mongoHandle: self,\n      multiplexer: multiplexer,\n      ordered: ordered,\n      matcher: matcher,\n      // ignored by polling\n      sorter: sorter,\n      // ignored by polling\n      _testOnlyPollCallback: callbacks._testOnlyPollCallback\n    }); // This field is only set for use in tests.\n\n    multiplexer._observeDriver = observeDriver;\n  } // Blocks until the initial adds have been sent.\n\n\n  multiplexer.addHandleAndSendInitialAdds(observeHandle);\n  return observeHandle;\n}; // Listen for the invalidation messages that will trigger us to poll the\n// database for changes. If this selector specifies specific IDs, specify them\n// here, so that updates to different specific IDs don't cause us to poll.\n// listenCallback is the same kind of (notification, complete) callback passed\n// to InvalidationCrossbar.listen.\n\n\nlistenAll = function (cursorDescription, listenCallback) {\n  var listeners = [];\n  forEachTrigger(cursorDescription, function (trigger) {\n    listeners.push(DDPServer._InvalidationCrossbar.listen(trigger, listenCallback));\n  });\n  return {\n    stop: function () {\n      _.each(listeners, function (listener) {\n        listener.stop();\n      });\n    }\n  };\n};\n\nforEachTrigger = function (cursorDescription, triggerCallback) {\n  var key = {\n    collection: cursorDescription.collectionName\n  };\n\n  var specificIds = LocalCollection._idsMatchedBySelector(cursorDescription.selector);\n\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      triggerCallback(_.extend({\n        id: id\n      }, key));\n    });\n\n    triggerCallback(_.extend({\n      dropCollection: true,\n      id: null\n    }, key));\n  } else {\n    triggerCallback(key);\n  } // Everyone cares about the database being dropped.\n\n\n  triggerCallback({\n    dropDatabase: true\n  });\n}; // observeChanges for tailable cursors on capped collections.\n//\n// Some differences from normal cursors:\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you\n//     do update a document that has already been produced, this will not notice\n//     it.\n//   - If you disconnect and reconnect from Mongo, it will essentially restart\n//     the query, which will lead to duplicate results. This is pretty bad,\n//     but if you include a field called 'ts' which is inserted as\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the\n//     current Mongo-style timestamp), we'll be able to find the place to\n//     restart properly. (This field is specifically understood by Mongo with an\n//     optimization which allows it to find the right place to start without\n//     an index on ts. It's how the oplog works.)\n//   - No callbacks are triggered synchronously with the call (there's no\n//     differentiation between \"initial data\" and \"later changes\"; everything\n//     that matches the query gets sent asynchronously).\n//   - De-duplication is not implemented.\n//   - Does not yet interact with the write fence. Probably, this should work by\n//     ignoring removes (which don't work on capped collections) and updates\n//     (which don't affect tailable cursors), and just keeping track of the ID\n//     of the inserted object, and closing the write fence once you get to that\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match\n//     the query, though.  On the other hand, the write fence can close\n//     immediately if it does not match the query. So if we trust minimongo\n//     enough to accurately evaluate the query against the write fence, we\n//     should be able to do this...  Of course, minimongo doesn't even support\n//     Mongo Timestamps yet.\n\n\nMongoConnection.prototype._observeChangesTailable = function (cursorDescription, ordered, callbacks) {\n  var self = this; // Tailable cursors only ever call added/addedBefore callbacks, so it's an\n  // error if you didn't provide them.\n\n  if (ordered && !callbacks.addedBefore || !ordered && !callbacks.added) {\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\") + \" tailable cursor without a \" + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n  }\n\n  return self.tail(cursorDescription, function (doc) {\n    var id = doc._id;\n    delete doc._id; // The ts is an implementation detail. Hide it.\n\n    delete doc.ts;\n\n    if (ordered) {\n      callbacks.addedBefore(id, doc, null);\n    } else {\n      callbacks.added(id, doc);\n    }\n  });\n}; // XXX We probably need to find a better way to expose this. Right now\n// it's only used by tests, but in fact you need it in normal\n// operation to interact with capped collections.\n\n\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;\nMongoInternals.Connection = MongoConnection;","map":{"version":3,"sources":["packages/mongo/mongo_driver.js"],"names":["module1","module","DocFetcher","link","v","MongoDB","NpmModuleMongodb","Future","Npm","require","MongoInternals","NpmModules","mongodb","version","NpmModuleMongodbVersion","NpmModule","replaceNames","filter","thing","_","isArray","map","bind","ret","each","value","key","Timestamp","prototype","clone","makeMongoLegal","name","unmakeMongoLegal","substr","replaceMongoAtomWithMeteor","document","Binary","buffer","Uint8Array","ObjectID","Mongo","toHexString","Decimal128","Decimal","toString","size","EJSON","fromJSONValue","undefined","replaceMeteorAtomWithMongo","isBinary","Buffer","from","fromString","_isCustomType","toJSONValue","replaceTypes","atomTransformer","replacedTopLevelAtom","val","valReplaced","MongoConnection","url","options","self","_observeMultiplexers","_onFailoverHook","Hook","mongoOptions","Object","assign","autoReconnect","reconnectTries","Infinity","ignoreUndefined","useNewUrlParser","_connectionOptions","test","native_parser","has","poolSize","db","_primary","_oplogHandle","_docFetcher","connectFuture","connect","Meteor","bindEnvironment","err","client","serverConfig","isMasterDoc","primary","on","kind","doc","callback","me","resolver","wait","oplogUrl","Package","OplogHandle","databaseName","close","Error","oplogHandle","stop","wrap","rawCollection","collectionName","future","collection","_createCappedCollection","byteSize","maxDocuments","createCollection","capped","max","_maybeBeginWrite","fence","DDPServer","_CurrentWriteFence","get","beginWrite","committed","_onFailover","register","writeCallback","write","refresh","result","refreshErr","bindEnvironmentForWrite","_insert","collection_name","sendError","e","_expectedByTest","LocalCollection","_isPlainObject","id","_id","insert","safe","_refresh","selector","refreshKey","specificIds","_idsMatchedBySelector","extend","_remove","wrappedCallback","driverResult","transformResult","numberAffected","remove","_dropCollection","cb","dropCollection","drop","_dropDatabase","dropDatabase","_update","mod","Function","mongoOpts","upsert","multi","fullResult","mongoSelector","mongoMod","isModify","_isModificationMod","_forbidReplace","knownId","newDoc","_createUpsertDocument","insertedId","generatedId","simulateUpsertWithInsertedId","error","_returnObject","hasOwnProperty","$setOnInsert","update","meteorResult","mongoResult","upserted","length","n","NUM_OPTIMISTIC_TRIES","_isCannotChangeIdError","errmsg","indexOf","mongoOptsForUpdate","mongoOptsForInsert","replacementWithId","tries","doUpdate","doConditionalInsert","method","wrapAsync","apply","arguments","find","Cursor","CursorDescription","findOne","limit","fetch","_ensureIndex","index","indexName","ensureIndex","_dropIndex","dropIndex","Collection","_rewriteSelector","mongo","cursorDescription","_mongo","_cursorDescription","_synchronousCursor","Symbol","iterator","tailable","_createSynchronousCursor","selfForIteration","useTransform","rewind","getTransform","transform","_publishCursor","sub","_getCollectionName","observe","callbacks","_observeFromObserveChanges","observeChanges","methods","ordered","_observeChangesCallbacksAreOrdered","exceptionName","forEach","_observeChanges","pick","cursorOptions","sort","skip","projection","fields","awaitdata","numberOfRetries","OPLOG_COLLECTION","ts","oplogReplay","dbCursor","maxTimeMs","maxTimeMS","hint","SynchronousCursor","_dbCursor","_selfForIteration","_transform","wrapTransform","_synchronousCount","count","_visitedIds","_IdMap","_rawNextObjectPromise","Promise","resolve","reject","next","_nextObjectPromise","set","_nextObjectPromiseWithTimeout","timeoutMS","nextObjectPromise","timeoutErr","timeoutPromise","timer","setTimeout","race","catch","_nextObject","await","thisArg","_rewind","call","res","push","identity","applySkipLimit","getRawObjects","results","done","tail","docCallback","cursor","stopped","lastTS","loop","newSelector","$gt","defer","_observeChangesTailable","observeKey","stringify","multiplexer","observeDriver","firstHandle","_noYieldsAllowed","ObserveMultiplexer","onStop","observeHandle","ObserveHandle","matcher","sorter","canUseOplog","all","_testOnlyPollCallback","Minimongo","Matcher","OplogObserveDriver","cursorSupported","Sorter","f","driverClass","PollingObserveDriver","mongoHandle","_observeDriver","addHandleAndSendInitialAdds","listenAll","listenCallback","listeners","forEachTrigger","trigger","_InvalidationCrossbar","listen","listener","triggerCallback","addedBefore","added","MongoTimestamp","Connection"],"mappings":"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","sourcesContent":["/**\n * Provide a synchronous Collection API using fibers, backed by\n * MongoDB.  This is only for use on the server, and mostly identical\n * to the client API.\n *\n * NOTE: the public API methods must be run within a fiber. If you call\n * these outside of a fiber they will explode!\n */\n\nvar MongoDB = NpmModuleMongodb;\nvar Future = Npm.require('fibers/future');\nimport { DocFetcher } from \"./doc_fetcher.js\";\n\nMongoInternals = {};\n\nMongoInternals.NpmModules = {\n  mongodb: {\n    version: NpmModuleMongodbVersion,\n    module: MongoDB\n  }\n};\n\n// Older version of what is now available via\n// MongoInternals.NpmModules.mongodb.module.  It was never documented, but\n// people do use it.\n// XXX COMPAT WITH 1.0.3.2\nMongoInternals.NpmModule = MongoDB;\n\n// This is used to add or remove EJSON from the beginning of everything nested\n// inside an EJSON custom type. It should only be called on pure JSON!\nvar replaceNames = function (filter, thing) {\n  if (typeof thing === \"object\" && thing !== null) {\n    if (_.isArray(thing)) {\n      return _.map(thing, _.bind(replaceNames, null, filter));\n    }\n    var ret = {};\n    _.each(thing, function (value, key) {\n      ret[filter(key)] = replaceNames(filter, value);\n    });\n    return ret;\n  }\n  return thing;\n};\n\n// Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just\n// doing a structural clone).\n// XXX how ok is this? what if there are multiple copies of MongoDB loaded?\nMongoDB.Timestamp.prototype.clone = function () {\n  // Timestamps should be immutable.\n  return this;\n};\n\nvar makeMongoLegal = function (name) { return \"EJSON\" + name; };\nvar unmakeMongoLegal = function (name) { return name.substr(5); };\n\nvar replaceMongoAtomWithMeteor = function (document) {\n  if (document instanceof MongoDB.Binary) {\n    var buffer = document.value(true);\n    return new Uint8Array(buffer);\n  }\n  if (document instanceof MongoDB.ObjectID) {\n    return new Mongo.ObjectID(document.toHexString());\n  }\n  if (document instanceof MongoDB.Decimal128) {\n    return Decimal(document.toString());\n  }\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"] && _.size(document) === 2) {\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  return undefined;\n};\n\nvar replaceMeteorAtomWithMongo = function (document) {\n  if (EJSON.isBinary(document)) {\n    // This does more copies than we'd like, but is necessary because\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually\n    // serialize it correctly).\n    return new MongoDB.Binary(Buffer.from(document));\n  }\n  if (document instanceof Mongo.ObjectID) {\n    return new MongoDB.ObjectID(document.toHexString());\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  if (document instanceof Decimal) {\n    return MongoDB.Decimal128.fromString(document.toString());\n  }\n  if (EJSON._isCustomType(document)) {\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));\n  }\n  // It is not ordinarily possible to stick dollar-sign keys into mongo\n  // so we don't bother checking for things that need escaping at this time.\n  return undefined;\n};\n\nvar replaceTypes = function (document, atomTransformer) {\n  if (typeof document !== 'object' || document === null)\n    return document;\n\n  var replacedTopLevelAtom = atomTransformer(document);\n  if (replacedTopLevelAtom !== undefined)\n    return replacedTopLevelAtom;\n\n  var ret = document;\n  _.each(document, function (val, key) {\n    var valReplaced = replaceTypes(val, atomTransformer);\n    if (val !== valReplaced) {\n      // Lazy clone. Shallow copy.\n      if (ret === document)\n        ret = _.clone(document);\n      ret[key] = valReplaced;\n    }\n  });\n  return ret;\n};\n\n\nMongoConnection = function (url, options) {\n  var self = this;\n  options = options || {};\n  self._observeMultiplexers = {};\n  self._onFailoverHook = new Hook;\n\n  var mongoOptions = Object.assign({\n    // Reconnect on error.\n    autoReconnect: true,\n    // Try to reconnect forever, instead of stopping after 30 tries (the\n    // default), with each attempt separated by 1000ms.\n    reconnectTries: Infinity,\n    ignoreUndefined: true,\n    // Required to silence deprecation warnings with mongodb@3.1.1.\n    useNewUrlParser: true,\n  }, Mongo._connectionOptions);\n\n  // Disable the native parser by default, unless specifically enabled\n  // in the mongo URL.\n  // - The native driver can cause errors which normally would be\n  //   thrown, caught, and handled into segfaults that take down the\n  //   whole app.\n  // - Binary modules don't yet work when you bundle and move the bundle\n  //   to a different platform (aka deploy)\n  // We should revisit this after binary npm module support lands.\n  if (!(/[\\?&]native_?[pP]arser=/.test(url))) {\n    mongoOptions.native_parser = false;\n  }\n\n  // Internally the oplog connections specify their own poolSize\n  // which we don't want to overwrite with any user defined value\n  if (_.has(options, 'poolSize')) {\n    // If we just set this for \"server\", replSet will override it. If we just\n    // set it for replSet, it will be ignored if we're not using a replSet.\n    mongoOptions.poolSize = options.poolSize;\n  }\n\n  self.db = null;\n  // We keep track of the ReplSet's primary, so that we can trigger hooks when\n  // it changes.  The Node driver's joined callback seems to fire way too\n  // often, which is why we need to track it ourselves.\n  self._primary = null;\n  self._oplogHandle = null;\n  self._docFetcher = null;\n\n\n  var connectFuture = new Future;\n  MongoDB.connect(\n    url,\n    mongoOptions,\n    Meteor.bindEnvironment(\n      function (err, client) {\n        if (err) {\n          throw err;\n        }\n\n        var db = client.db();\n\n        // First, figure out what the current primary is, if any.\n        if (db.serverConfig.isMasterDoc) {\n          self._primary = db.serverConfig.isMasterDoc.primary;\n        }\n\n        db.serverConfig.on(\n          'joined', Meteor.bindEnvironment(function (kind, doc) {\n            if (kind === 'primary') {\n              if (doc.primary !== self._primary) {\n                self._primary = doc.primary;\n                self._onFailoverHook.each(function (callback) {\n                  callback();\n                  return true;\n                });\n              }\n            } else if (doc.me === self._primary) {\n              // The thing we thought was primary is now something other than\n              // primary.  Forget that we thought it was primary.  (This means\n              // that if a server stops being primary and then starts being\n              // primary again without another server becoming primary in the\n              // middle, we'll correctly count it as a failover.)\n              self._primary = null;\n            }\n          }));\n\n        // Allow the constructor to return.\n        connectFuture['return']({ client, db });\n      },\n      connectFuture.resolver()  // onException\n    )\n  );\n\n  // Wait for the connection to be successful (throws on failure) and assign the\n  // results (`client` and `db`) to `self`.\n  Object.assign(self, connectFuture.wait());\n\n  if (options.oplogUrl && ! Package['disable-oplog']) {\n    self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);\n    self._docFetcher = new DocFetcher(self);\n  }\n};\n\nMongoConnection.prototype.close = function() {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"close called before Connection created?\");\n\n  // XXX probably untested\n  var oplogHandle = self._oplogHandle;\n  self._oplogHandle = null;\n  if (oplogHandle)\n    oplogHandle.stop();\n\n  // Use Future.wrap so that errors get thrown. This happens to\n  // work even outside a fiber since the 'close' method is not\n  // actually asynchronous.\n  Future.wrap(_.bind(self.client.close, self.client))(true).wait();\n};\n\n// Returns the Mongo Collection object; may yield.\nMongoConnection.prototype.rawCollection = function (collectionName) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"rawCollection called before Connection created?\");\n\n  var future = new Future;\n  self.db.collection(collectionName, future.resolver());\n  return future.wait();\n};\n\nMongoConnection.prototype._createCappedCollection = function (\n    collectionName, byteSize, maxDocuments) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"_createCappedCollection called before Connection created?\");\n\n  var future = new Future();\n  self.db.createCollection(\n    collectionName,\n    { capped: true, size: byteSize, max: maxDocuments },\n    future.resolver());\n  future.wait();\n};\n\n// This should be called synchronously with a write, to create a\n// transaction on the current write fence, if any. After we can read\n// the write, and after observers have been notified (or at least,\n// after the observer notifiers have added themselves to the write\n// fence), you should call 'committed()' on the object returned.\nMongoConnection.prototype._maybeBeginWrite = function () {\n  var fence = DDPServer._CurrentWriteFence.get();\n  if (fence) {\n    return fence.beginWrite();\n  } else {\n    return {committed: function () {}};\n  }\n};\n\n// Internal interface: adds a callback which is called when the Mongo primary\n// changes. Returns a stop handle.\nMongoConnection.prototype._onFailover = function (callback) {\n  return this._onFailoverHook.register(callback);\n};\n\n\n//////////// Public API //////////\n\n// The write methods block until the database has confirmed the write (it may\n// not be replicated or stable on disk, but one server has confirmed it) if no\n// callback is provided. If a callback is provided, then they call the callback\n// when the write is confirmed. They return nothing on success, and raise an\n// exception on failure.\n//\n// After making a write (with insert, update, remove), observers are\n// notified asynchronously. If you want to receive a callback once all\n// of the observer notifications have landed for your write, do the\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new\n// _WriteFence, and then set a callback on the write fence.)\n//\n// Since our execution environment is single-threaded, this is\n// well-defined -- a write \"has been made\" if it's returned, and an\n// observer \"has been notified\" if its callback has returned.\n\nvar writeCallback = function (write, refresh, callback) {\n  return function (err, result) {\n    if (! err) {\n      // XXX We don't have to run this on error, right?\n      try {\n        refresh();\n      } catch (refreshErr) {\n        if (callback) {\n          callback(refreshErr);\n          return;\n        } else {\n          throw refreshErr;\n        }\n      }\n    }\n    write.committed();\n    if (callback) {\n      callback(err, result);\n    } else if (err) {\n      throw err;\n    }\n  };\n};\n\nvar bindEnvironmentForWrite = function (callback) {\n  return Meteor.bindEnvironment(callback, \"Mongo write\");\n};\n\nMongoConnection.prototype._insert = function (collection_name, document,\n                                              callback) {\n  var self = this;\n\n  var sendError = function (e) {\n    if (callback)\n      return callback(e);\n    throw e;\n  };\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e._expectedByTest = true;\n    sendError(e);\n    return;\n  }\n\n  if (!(LocalCollection._isPlainObject(document) &&\n        !EJSON._isCustomType(document))) {\n    sendError(new Error(\n      \"Only plain objects may be inserted into MongoDB\"));\n    return;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collection_name, id: document._id });\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.insert(replaceTypes(document, replaceMeteorAtomWithMongo),\n                      {safe: true}, callback);\n  } catch (err) {\n    write.committed();\n    throw err;\n  }\n};\n\n// Cause queries that may be affected by the selector to poll in this write\n// fence.\nMongoConnection.prototype._refresh = function (collectionName, selector) {\n  var refreshKey = {collection: collectionName};\n  // If we know which documents we're removing, don't poll queries that are\n  // specific to other documents. (Note that multiple notifications here should\n  // not cause multiple polls, since all our listener is doing is enqueueing a\n  // poll.)\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      Meteor.refresh(_.extend({id: id}, refreshKey));\n    });\n  } else {\n    Meteor.refresh(refreshKey);\n  }\n};\n\nMongoConnection.prototype._remove = function (collection_name, selector,\n                                              callback) {\n  var self = this;\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e._expectedByTest = true;\n    if (callback) {\n      return callback(e);\n    } else {\n      throw e;\n    }\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n\n  try {\n    var collection = self.rawCollection(collection_name);\n    var wrappedCallback = function(err, driverResult) {\n      callback(err, transformResult(driverResult).numberAffected);\n    };\n    collection.remove(replaceTypes(selector, replaceMeteorAtomWithMongo),\n                       {safe: true}, wrappedCallback);\n  } catch (err) {\n    write.committed();\n    throw err;\n  }\n};\n\nMongoConnection.prototype._dropCollection = function (collectionName, cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collectionName, id: null,\n                    dropCollection: true});\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    var collection = self.rawCollection(collectionName);\n    collection.drop(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`\n// because it lets the test's fence wait for it to be complete.\nMongoConnection.prototype._dropDatabase = function (cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({ dropDatabase: true });\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    self.db.dropDatabase(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._update = function (collection_name, selector, mod,\n                                              options, callback) {\n  var self = this;\n\n  if (! callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e._expectedByTest = true;\n    if (callback) {\n      return callback(e);\n    } else {\n      throw e;\n    }\n  }\n\n  // explicit safety check. null and undefined can crash the mongo\n  // driver. Although the node driver and minimongo do 'support'\n  // non-object modifier in that they don't crash, they are not\n  // meaningful operations and do not do anything. Defensively throw an\n  // error here.\n  if (!mod || typeof mod !== 'object')\n    throw new Error(\"Invalid modifier. Modifier must be an object.\");\n\n  if (!(LocalCollection._isPlainObject(mod) &&\n        !EJSON._isCustomType(mod))) {\n    throw new Error(\n      \"Only plain objects may be used as replacement\" +\n        \" documents in MongoDB\");\n  }\n\n  if (!options) options = {};\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = writeCallback(write, refresh, callback);\n  try {\n    var collection = self.rawCollection(collection_name);\n    var mongoOpts = {safe: true};\n    // explictly enumerate options that minimongo supports\n    if (options.upsert) mongoOpts.upsert = true;\n    if (options.multi) mongoOpts.multi = true;\n    // Lets you get a more more full result from MongoDB. Use with caution:\n    // might not work with C.upsert (as opposed to C.update({upsert:true}) or\n    // with simulated upsert.\n    if (options.fullResult) mongoOpts.fullResult = true;\n\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);\n\n    var isModify = LocalCollection._isModificationMod(mongoMod);\n\n    if (options._forbidReplace && !isModify) {\n      var err = new Error(\"Invalid modifier. Replacements are forbidden.\");\n      if (callback) {\n        return callback(err);\n      } else {\n        throw err;\n      }\n    }\n\n    // We've already run replaceTypes/replaceMeteorAtomWithMongo on\n    // selector and mod.  We assume it doesn't matter, as far as\n    // the behavior of modifiers is concerned, whether `_modify`\n    // is run on EJSON or on mongo-converted EJSON.\n\n    // Run this code up front so that it fails fast if someone uses\n    // a Mongo update operator we don't support.\n    let knownId;\n    if (options.upsert) {\n      try {\n        let newDoc = LocalCollection._createUpsertDocument(selector, mod);\n        knownId = newDoc._id;\n      } catch (err) {\n        if (callback) {\n          return callback(err);\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    if (options.upsert &&\n        ! isModify &&\n        ! knownId &&\n        options.insertedId &&\n        ! (options.insertedId instanceof Mongo.ObjectID &&\n           options.generatedId)) {\n      // In case of an upsert with a replacement, where there is no _id defined\n      // in either the query or the replacement doc, mongo will generate an id itself.\n      // Therefore we need this special strategy if we want to control the id ourselves.\n\n      // We don't need to do this when:\n      // - This is not a replacement, so we can add an _id to $setOnInsert\n      // - The id is defined by query or mod we can just add it to the replacement doc\n      // - The user did not specify any id preference and the id is a Mongo ObjectId,\n      //     then we can just let Mongo generate the id\n\n      simulateUpsertWithInsertedId(\n        collection, mongoSelector, mongoMod, options,\n        // This callback does not need to be bindEnvironment'ed because\n        // simulateUpsertWithInsertedId() wraps it and then passes it through\n        // bindEnvironmentForWrite.\n        function (error, result) {\n          // If we got here via a upsert() call, then options._returnObject will\n          // be set and we should return the whole object. Otherwise, we should\n          // just return the number of affected docs to match the mongo API.\n          if (result && ! options._returnObject) {\n            callback(error, result.numberAffected);\n          } else {\n            callback(error, result);\n          }\n        }\n      );\n    } else {\n\n      if (options.upsert && !knownId && options.insertedId && isModify) {\n        if (!mongoMod.hasOwnProperty('$setOnInsert')) {\n          mongoMod.$setOnInsert = {};\n        }\n        knownId = options.insertedId;\n        Object.assign(mongoMod.$setOnInsert, replaceTypes({_id: options.insertedId}, replaceMeteorAtomWithMongo));\n      }\n\n      collection.update(\n        mongoSelector, mongoMod, mongoOpts,\n        bindEnvironmentForWrite(function (err, result) {\n          if (! err) {\n            var meteorResult = transformResult(result);\n            if (meteorResult && options._returnObject) {\n              // If this was an upsert() call, and we ended up\n              // inserting a new doc and we know its id, then\n              // return that id as well.\n              if (options.upsert && meteorResult.insertedId) {\n                if (knownId) {\n                  meteorResult.insertedId = knownId;\n                } else if (meteorResult.insertedId instanceof MongoDB.ObjectID) {\n                  meteorResult.insertedId = new Mongo.ObjectID(meteorResult.insertedId.toHexString());\n                }\n              }\n\n              callback(err, meteorResult);\n            } else {\n              callback(err, meteorResult.numberAffected);\n            }\n          } else {\n            callback(err);\n          }\n        }));\n    }\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nvar transformResult = function (driverResult) {\n  var meteorResult = { numberAffected: 0 };\n  if (driverResult) {\n    var mongoResult = driverResult.result;\n\n    // On updates with upsert:true, the inserted values come as a list of\n    // upserted values -- even with options.multi, when the upsert does insert,\n    // it only inserts one element.\n    if (mongoResult.upserted) {\n      meteorResult.numberAffected += mongoResult.upserted.length;\n\n      if (mongoResult.upserted.length == 1) {\n        meteorResult.insertedId = mongoResult.upserted[0]._id;\n      }\n    } else {\n      meteorResult.numberAffected = mongoResult.n;\n    }\n  }\n\n  return meteorResult;\n};\n\n\nvar NUM_OPTIMISTIC_TRIES = 3;\n\n// exposed for testing\nMongoConnection._isCannotChangeIdError = function (err) {\n\n  // Mongo 3.2.* returns error as next Object:\n  // {name: String, code: Number, errmsg: String}\n  // Older Mongo returns:\n  // {name: String, code: Number, err: String}\n  var error = err.errmsg || err.err;\n\n  // We don't use the error code here\n  // because the error code we observed it producing (16837) appears to be\n  // a far more generic error code based on examining the source.\n  if (error.indexOf('The _id field cannot be changed') === 0\n    || error.indexOf(\"the (immutable) field '_id' was found to have been altered to _id\") !== -1) {\n    return true;\n  }\n\n  return false;\n};\n\nvar simulateUpsertWithInsertedId = function (collection, selector, mod,\n                                             options, callback) {\n  // STRATEGY: First try doing an upsert with a generated ID.\n  // If this throws an error about changing the ID on an existing document\n  // then without affecting the database, we know we should probably try\n  // an update without the generated ID. If it affected 0 documents,\n  // then without affecting the database, we the document that first\n  // gave the error is probably removed and we need to try an insert again\n  // We go back to step one and repeat.\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's\n  // unlikely our writes will continue to be interfered with under normal\n  // circumstances (though sufficiently heavy contention with writers\n  // disagreeing on the existence of an object will cause writes to fail\n  // in theory).\n\n  var insertedId = options.insertedId; // must exist\n  var mongoOptsForUpdate = {\n    safe: true,\n    multi: options.multi\n  };\n  var mongoOptsForInsert = {\n    safe: true,\n    upsert: true\n  };\n\n  var replacementWithId = Object.assign(\n    replaceTypes({_id: insertedId}, replaceMeteorAtomWithMongo),\n    mod);\n\n  var tries = NUM_OPTIMISTIC_TRIES;\n\n  var doUpdate = function () {\n    tries--;\n    if (! tries) {\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));\n    } else {\n      collection.update(selector, mod, mongoOptsForUpdate,\n                        bindEnvironmentForWrite(function (err, result) {\n                          if (err) {\n                            callback(err);\n                          } else if (result && result.result.n != 0) {\n                            callback(null, {\n                              numberAffected: result.result.n\n                            });\n                          } else {\n                            doConditionalInsert();\n                          }\n                        }));\n    }\n  };\n\n  var doConditionalInsert = function () {\n    collection.update(selector, replacementWithId, mongoOptsForInsert,\n                      bindEnvironmentForWrite(function (err, result) {\n                        if (err) {\n                          // figure out if this is a\n                          // \"cannot change _id of document\" error, and\n                          // if so, try doUpdate() again, up to 3 times.\n                          if (MongoConnection._isCannotChangeIdError(err)) {\n                            doUpdate();\n                          } else {\n                            callback(err);\n                          }\n                        } else {\n                          callback(null, {\n                            numberAffected: result.result.upserted.length,\n                            insertedId: insertedId,\n                          });\n                        }\n                      }));\n  };\n\n  doUpdate();\n};\n\n_.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {\n  MongoConnection.prototype[method] = function (/* arguments */) {\n    var self = this;\n    return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);\n  };\n});\n\n// XXX MongoConnection.upsert() does not return the id of the inserted document\n// unless you set it explicitly in the selector or modifier (as a replacement\n// doc).\nMongoConnection.prototype.upsert = function (collectionName, selector, mod,\n                                             options, callback) {\n  var self = this;\n  if (typeof options === \"function\" && ! callback) {\n    callback = options;\n    options = {};\n  }\n\n  return self.update(collectionName, selector, mod,\n                     _.extend({}, options, {\n                       upsert: true,\n                       _returnObject: true\n                     }), callback);\n};\n\nMongoConnection.prototype.find = function (collectionName, selector, options) {\n  var self = this;\n\n  if (arguments.length === 1)\n    selector = {};\n\n  return new Cursor(\n    self, new CursorDescription(collectionName, selector, options));\n};\n\nMongoConnection.prototype.findOne = function (collection_name, selector,\n                                              options) {\n  var self = this;\n  if (arguments.length === 1)\n    selector = {};\n\n  options = options || {};\n  options.limit = 1;\n  return self.find(collection_name, selector, options).fetch()[0];\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongoConnection.prototype._ensureIndex = function (collectionName, index,\n                                                   options) {\n  var self = this;\n\n  // We expect this function to be called at startup, not from within a method,\n  // so we don't interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.ensureIndex(index, options, future.resolver());\n  future.wait();\n};\nMongoConnection.prototype._dropIndex = function (collectionName, index) {\n  var self = this;\n\n  // This function is only used by test code, not within a method, so we don't\n  // interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.dropIndex(index, future.resolver());\n  future.wait();\n};\n\n// CURSORS\n\n// There are several classes which relate to cursors:\n//\n// CursorDescription represents the arguments used to construct a cursor:\n// collectionName, selector, and (find) options.  Because it is used as a key\n// for cursor de-dup, everything in it should either be JSON-stringifiable or\n// not affect observeChanges output (eg, options.transform functions are not\n// stringifiable but do not affect observeChanges).\n//\n// SynchronousCursor is a wrapper around a MongoDB cursor\n// which includes fully-synchronous versions of forEach, etc.\n//\n// Cursor is the cursor object returned from find(), which implements the\n// documented Mongo.Collection cursor API.  It wraps a CursorDescription and a\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method\n// like fetch or forEach on it).\n//\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a\n// reference to an ObserveMultiplexer.\n//\n// ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a\n// single observe driver.\n//\n// There are two \"observe drivers\" which drive ObserveMultiplexers:\n//   - PollingObserveDriver caches the results of a query and reruns it when\n//     necessary.\n//   - OplogObserveDriver follows the Mongo operation log to directly observe\n//     database changes.\n// Both implementations follow the same simple interface: when you create them,\n// they start sending observeChanges callbacks (and a ready() invocation) to\n// their ObserveMultiplexer, and you stop them by calling their stop() method.\n\nCursorDescription = function (collectionName, selector, options) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.selector = Mongo.Collection._rewriteSelector(selector);\n  self.options = options || {};\n};\n\nCursor = function (mongo, cursorDescription) {\n  var self = this;\n\n  self._mongo = mongo;\n  self._cursorDescription = cursorDescription;\n  self._synchronousCursor = null;\n};\n\n_.each(['forEach', 'map', 'fetch', 'count', Symbol.iterator], function (method) {\n  Cursor.prototype[method] = function () {\n    var self = this;\n\n    // You can only observe a tailable cursor.\n    if (self._cursorDescription.options.tailable)\n      throw new Error(\"Cannot call \" + method + \" on a tailable cursor\");\n\n    if (!self._synchronousCursor) {\n      self._synchronousCursor = self._mongo._createSynchronousCursor(\n        self._cursorDescription, {\n          // Make sure that the \"self\" argument to forEach/map callbacks is the\n          // Cursor, not the SynchronousCursor.\n          selfForIteration: self,\n          useTransform: true\n        });\n    }\n\n    return self._synchronousCursor[method].apply(\n      self._synchronousCursor, arguments);\n  };\n});\n\n// Since we don't actually have a \"nextObject\" interface, there's really no\n// reason to have a \"rewind\" interface.  All it did was make multiple calls\n// to fetch/map/forEach return nothing the second time.\n// XXX COMPAT WITH 0.8.1\nCursor.prototype.rewind = function () {\n};\n\nCursor.prototype.getTransform = function () {\n  return this._cursorDescription.options.transform;\n};\n\n// When you call Meteor.publish() with a function that returns a Cursor, we need\n// to transmute it into the equivalent subscription.  This is the function that\n// does that.\n\nCursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  var collection = self._cursorDescription.collectionName;\n  return Mongo.Collection._publishCursor(self, sub, collection);\n};\n\n// Used to guarantee that publish functions return at most one cursor per\n// collection. Private, because we might later have cursors that include\n// documents from multiple collections somehow.\nCursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self._cursorDescription.collectionName;\n};\n\nCursor.prototype.observe = function (callbacks) {\n  var self = this;\n  return LocalCollection._observeFromObserveChanges(self, callbacks);\n};\n\nCursor.prototype.observeChanges = function (callbacks) {\n  var self = this;\n  var methods = [\n    'addedAt',\n    'added',\n    'changedAt',\n    'changed',\n    'removedAt',\n    'removed',\n    'movedTo'\n  ];\n  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);\n\n  // XXX: Can we find out if callbacks are from observe?\n  var exceptionName = ' observe/observeChanges callback';\n  methods.forEach(function (method) {\n    if (callbacks[method] && typeof callbacks[method] == \"function\") {\n      callbacks[method] = Meteor.bindEnvironment(callbacks[method], method + exceptionName);\n    }\n  });\n\n  return self._mongo._observeChanges(\n    self._cursorDescription, ordered, callbacks);\n};\n\nMongoConnection.prototype._createSynchronousCursor = function(\n    cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  var collection = self.rawCollection(cursorDescription.collectionName);\n  var cursorOptions = cursorDescription.options;\n  var mongoOptions = {\n    sort: cursorOptions.sort,\n    limit: cursorOptions.limit,\n    skip: cursorOptions.skip,\n    projection: cursorOptions.fields\n  };\n\n  // Do we want a tailable cursor (which only works on capped collections)?\n  if (cursorOptions.tailable) {\n    // We want a tailable cursor...\n    mongoOptions.tailable = true;\n    // ... and for the server to wait a bit if any getMore has no data (rather\n    // than making us put the relevant sleeps in the client)...\n    mongoOptions.awaitdata = true;\n    // ... and to keep querying the server indefinitely rather than just 5 times\n    // if there's no more data.\n    mongoOptions.numberOfRetries = -1;\n    // And if this is on the oplog collection and the cursor specifies a 'ts',\n    // then set the undocumented oplog replay flag, which does a special scan to\n    // find the first document (instead of creating an index on ts). This is a\n    // very hard-coded Mongo flag which only works on the oplog collection and\n    // only works with the ts field.\n    if (cursorDescription.collectionName === OPLOG_COLLECTION &&\n        cursorDescription.selector.ts) {\n      mongoOptions.oplogReplay = true;\n    }\n  }\n\n  var dbCursor = collection.find(\n    replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo),\n    mongoOptions);\n\n  if (typeof cursorOptions.maxTimeMs !== 'undefined') {\n    dbCursor = dbCursor.maxTimeMS(cursorOptions.maxTimeMs);\n  }\n  if (typeof cursorOptions.hint !== 'undefined') {\n    dbCursor = dbCursor.hint(cursorOptions.hint);\n  }\n\n  return new SynchronousCursor(dbCursor, cursorDescription, options);\n};\n\nvar SynchronousCursor = function (dbCursor, cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  self._dbCursor = dbCursor;\n  self._cursorDescription = cursorDescription;\n  // The \"self\" argument passed to forEach/map callbacks. If we're wrapped\n  // inside a user-visible Cursor, we want to provide the outer cursor!\n  self._selfForIteration = options.selfForIteration || self;\n  if (options.useTransform && cursorDescription.options.transform) {\n    self._transform = LocalCollection.wrapTransform(\n      cursorDescription.options.transform);\n  } else {\n    self._transform = null;\n  }\n\n  self._synchronousCount = Future.wrap(dbCursor.count.bind(dbCursor));\n  self._visitedIds = new LocalCollection._IdMap;\n};\n\n_.extend(SynchronousCursor.prototype, {\n  // Returns a Promise for the next object from the underlying cursor (before\n  // the Mongo->Meteor type replacement).\n  _rawNextObjectPromise: function () {\n    const self = this;\n    return new Promise((resolve, reject) => {\n      self._dbCursor.next((err, doc) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(doc);\n        }\n      });\n    });\n  },\n\n  // Returns a Promise for the next object from the cursor, skipping those whose\n  // IDs we've already seen and replacing Mongo atoms with Meteor atoms.\n  _nextObjectPromise: async function () {\n    var self = this;\n\n    while (true) {\n      var doc = await self._rawNextObjectPromise();\n\n      if (!doc) return null;\n      doc = replaceTypes(doc, replaceMongoAtomWithMeteor);\n\n      if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {\n        // Did Mongo give us duplicate documents in the same cursor? If so,\n        // ignore this one. (Do this before the transform, since transform might\n        // return some unrelated value.) We don't do this for tailable cursors,\n        // because we want to maintain O(1) memory usage. And if there isn't _id\n        // for some reason (maybe it's the oplog), then we don't do this either.\n        // (Be careful to do this for falsey but existing _id, though.)\n        if (self._visitedIds.has(doc._id)) continue;\n        self._visitedIds.set(doc._id, true);\n      }\n\n      if (self._transform)\n        doc = self._transform(doc);\n\n      return doc;\n    }\n  },\n\n  // Returns a promise which is resolved with the next object (like with\n  // _nextObjectPromise) or rejected if the cursor doesn't return within\n  // timeoutMS ms.\n  _nextObjectPromiseWithTimeout: function (timeoutMS) {\n    const self = this;\n    if (!timeoutMS) {\n      return self._nextObjectPromise();\n    }\n    const nextObjectPromise = self._nextObjectPromise();\n    const timeoutErr = new Error('Client-side timeout waiting for next object');\n    const timeoutPromise = new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        reject(timeoutErr);\n      }, timeoutMS);\n    });\n    return Promise.race([nextObjectPromise, timeoutPromise])\n      .catch((err) => {\n        if (err === timeoutErr) {\n          self.close();\n        }\n        throw err;\n      });\n  },\n\n  _nextObject: function () {\n    var self = this;\n    return self._nextObjectPromise().await();\n  },\n\n  forEach: function (callback, thisArg) {\n    var self = this;\n\n    // Get back to the beginning.\n    self._rewind();\n\n    // We implement the loop ourself instead of using self._dbCursor.each,\n    // because \"each\" will call its callback outside of a fiber which makes it\n    // much more complex to make this function synchronous.\n    var index = 0;\n    while (true) {\n      var doc = self._nextObject();\n      if (!doc) return;\n      callback.call(thisArg, doc, index++, self._selfForIteration);\n    }\n  },\n\n  // XXX Allow overlapping callback executions if callback yields.\n  map: function (callback, thisArg) {\n    var self = this;\n    var res = [];\n    self.forEach(function (doc, index) {\n      res.push(callback.call(thisArg, doc, index, self._selfForIteration));\n    });\n    return res;\n  },\n\n  _rewind: function () {\n    var self = this;\n\n    // known to be synchronous\n    self._dbCursor.rewind();\n\n    self._visitedIds = new LocalCollection._IdMap;\n  },\n\n  // Mostly usable for tailable cursors.\n  close: function () {\n    var self = this;\n\n    self._dbCursor.close();\n  },\n\n  fetch: function () {\n    var self = this;\n    return self.map(_.identity);\n  },\n\n  count: function (applySkipLimit = false) {\n    var self = this;\n    return self._synchronousCount(applySkipLimit).wait();\n  },\n\n  // This method is NOT wrapped in Cursor.\n  getRawObjects: function (ordered) {\n    var self = this;\n    if (ordered) {\n      return self.fetch();\n    } else {\n      var results = new LocalCollection._IdMap;\n      self.forEach(function (doc) {\n        results.set(doc._id, doc);\n      });\n      return results;\n    }\n  }\n});\n\nSynchronousCursor.prototype[Symbol.iterator] = function () {\n  var self = this;\n\n  // Get back to the beginning.\n  self._rewind();\n\n  return {\n    next() {\n      const doc = self._nextObject();\n      return doc ? {\n        value: doc\n      } : {\n        done: true\n      };\n    }\n  };\n};\n\n// Tails the cursor described by cursorDescription, most likely on the\n// oplog. Calls docCallback with each document found. Ignores errors and just\n// restarts the tail on error.\n//\n// If timeoutMS is set, then if we don't get a new document every timeoutMS,\n// kill and restart the cursor. This is primarily a workaround for #8598.\nMongoConnection.prototype.tail = function (cursorDescription, docCallback, timeoutMS) {\n  var self = this;\n  if (!cursorDescription.options.tailable)\n    throw new Error(\"Can only tail a tailable cursor\");\n\n  var cursor = self._createSynchronousCursor(cursorDescription);\n\n  var stopped = false;\n  var lastTS;\n  var loop = function () {\n    var doc = null;\n    while (true) {\n      if (stopped)\n        return;\n      try {\n        doc = cursor._nextObjectPromiseWithTimeout(timeoutMS).await();\n      } catch (err) {\n        // There's no good way to figure out if this was actually an error from\n        // Mongo, or just client-side (including our own timeout error). Ah\n        // well. But either way, we need to retry the cursor (unless the failure\n        // was because the observe got stopped).\n        doc = null;\n      }\n      // Since we awaited a promise above, we need to check again to see if\n      // we've been stopped before calling the callback.\n      if (stopped)\n        return;\n      if (doc) {\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the\n        // cursor on error. (\"ts\" is a standard that Mongo uses internally for\n        // the oplog, and there's a special flag that lets you do binary search\n        // on it instead of needing to use an index.)\n        lastTS = doc.ts;\n        docCallback(doc);\n      } else {\n        var newSelector = _.clone(cursorDescription.selector);\n        if (lastTS) {\n          newSelector.ts = {$gt: lastTS};\n        }\n        cursor = self._createSynchronousCursor(new CursorDescription(\n          cursorDescription.collectionName,\n          newSelector,\n          cursorDescription.options));\n        // Mongo failover takes many seconds.  Retry in a bit.  (Without this\n        // setTimeout, we peg the CPU at 100% and never notice the actual\n        // failover.\n        Meteor.setTimeout(loop, 100);\n        break;\n      }\n    }\n  };\n\n  Meteor.defer(loop);\n\n  return {\n    stop: function () {\n      stopped = true;\n      cursor.close();\n    }\n  };\n};\n\nMongoConnection.prototype._observeChanges = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  if (cursorDescription.options.tailable) {\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);\n  }\n\n  // You may not filter out _id when observing changes, because the id is a core\n  // part of the observeChanges API.\n  if (cursorDescription.options.fields &&\n      (cursorDescription.options.fields._id === 0 ||\n       cursorDescription.options.fields._id === false)) {\n    throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n  }\n\n  var observeKey = EJSON.stringify(\n    _.extend({ordered: ordered}, cursorDescription));\n\n  var multiplexer, observeDriver;\n  var firstHandle = false;\n\n  // Find a matching ObserveMultiplexer, or create a new one. This next block is\n  // guaranteed to not yield (and it doesn't call anything that can observe a\n  // new query), so no other calls to this function can interleave with it.\n  Meteor._noYieldsAllowed(function () {\n    if (_.has(self._observeMultiplexers, observeKey)) {\n      multiplexer = self._observeMultiplexers[observeKey];\n    } else {\n      firstHandle = true;\n      // Create a new ObserveMultiplexer.\n      multiplexer = new ObserveMultiplexer({\n        ordered: ordered,\n        onStop: function () {\n          delete self._observeMultiplexers[observeKey];\n          observeDriver.stop();\n        }\n      });\n      self._observeMultiplexers[observeKey] = multiplexer;\n    }\n  });\n\n  var observeHandle = new ObserveHandle(multiplexer, callbacks);\n\n  if (firstHandle) {\n    var matcher, sorter;\n    var canUseOplog = _.all([\n      function () {\n        // At a bare minimum, using the oplog requires us to have an oplog, to\n        // want unordered callbacks, and to not want a callback on the polls\n        // that won't happen.\n        return self._oplogHandle && !ordered &&\n          !callbacks._testOnlyPollCallback;\n      }, function () {\n        // We need to be able to compile the selector. Fall back to polling for\n        // some newfangled $selector that minimongo doesn't support yet.\n        try {\n          matcher = new Minimongo.Matcher(cursorDescription.selector);\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }, function () {\n        // ... and the selector itself needs to support oplog.\n        return OplogObserveDriver.cursorSupported(cursorDescription, matcher);\n      }, function () {\n        // And we need to be able to compile the sort, if any.  eg, can't be\n        // {$natural: 1}.\n        if (!cursorDescription.options.sort)\n          return true;\n        try {\n          sorter = new Minimongo.Sorter(cursorDescription.options.sort);\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }], function (f) { return f(); });  // invoke each function\n\n    var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;\n    observeDriver = new driverClass({\n      cursorDescription: cursorDescription,\n      mongoHandle: self,\n      multiplexer: multiplexer,\n      ordered: ordered,\n      matcher: matcher,  // ignored by polling\n      sorter: sorter,  // ignored by polling\n      _testOnlyPollCallback: callbacks._testOnlyPollCallback\n    });\n\n    // This field is only set for use in tests.\n    multiplexer._observeDriver = observeDriver;\n  }\n\n  // Blocks until the initial adds have been sent.\n  multiplexer.addHandleAndSendInitialAdds(observeHandle);\n\n  return observeHandle;\n};\n\n// Listen for the invalidation messages that will trigger us to poll the\n// database for changes. If this selector specifies specific IDs, specify them\n// here, so that updates to different specific IDs don't cause us to poll.\n// listenCallback is the same kind of (notification, complete) callback passed\n// to InvalidationCrossbar.listen.\n\nlistenAll = function (cursorDescription, listenCallback) {\n  var listeners = [];\n  forEachTrigger(cursorDescription, function (trigger) {\n    listeners.push(DDPServer._InvalidationCrossbar.listen(\n      trigger, listenCallback));\n  });\n\n  return {\n    stop: function () {\n      _.each(listeners, function (listener) {\n        listener.stop();\n      });\n    }\n  };\n};\n\nforEachTrigger = function (cursorDescription, triggerCallback) {\n  var key = {collection: cursorDescription.collectionName};\n  var specificIds = LocalCollection._idsMatchedBySelector(\n    cursorDescription.selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      triggerCallback(_.extend({id: id}, key));\n    });\n    triggerCallback(_.extend({dropCollection: true, id: null}, key));\n  } else {\n    triggerCallback(key);\n  }\n  // Everyone cares about the database being dropped.\n  triggerCallback({ dropDatabase: true });\n};\n\n// observeChanges for tailable cursors on capped collections.\n//\n// Some differences from normal cursors:\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you\n//     do update a document that has already been produced, this will not notice\n//     it.\n//   - If you disconnect and reconnect from Mongo, it will essentially restart\n//     the query, which will lead to duplicate results. This is pretty bad,\n//     but if you include a field called 'ts' which is inserted as\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the\n//     current Mongo-style timestamp), we'll be able to find the place to\n//     restart properly. (This field is specifically understood by Mongo with an\n//     optimization which allows it to find the right place to start without\n//     an index on ts. It's how the oplog works.)\n//   - No callbacks are triggered synchronously with the call (there's no\n//     differentiation between \"initial data\" and \"later changes\"; everything\n//     that matches the query gets sent asynchronously).\n//   - De-duplication is not implemented.\n//   - Does not yet interact with the write fence. Probably, this should work by\n//     ignoring removes (which don't work on capped collections) and updates\n//     (which don't affect tailable cursors), and just keeping track of the ID\n//     of the inserted object, and closing the write fence once you get to that\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match\n//     the query, though.  On the other hand, the write fence can close\n//     immediately if it does not match the query. So if we trust minimongo\n//     enough to accurately evaluate the query against the write fence, we\n//     should be able to do this...  Of course, minimongo doesn't even support\n//     Mongo Timestamps yet.\nMongoConnection.prototype._observeChangesTailable = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  // Tailable cursors only ever call added/addedBefore callbacks, so it's an\n  // error if you didn't provide them.\n  if ((ordered && !callbacks.addedBefore) ||\n      (!ordered && !callbacks.added)) {\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\")\n                    + \" tailable cursor without a \"\n                    + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n  }\n\n  return self.tail(cursorDescription, function (doc) {\n    var id = doc._id;\n    delete doc._id;\n    // The ts is an implementation detail. Hide it.\n    delete doc.ts;\n    if (ordered) {\n      callbacks.addedBefore(id, doc, null);\n    } else {\n      callbacks.added(id, doc);\n    }\n  });\n};\n\n// XXX We probably need to find a better way to expose this. Right now\n// it's only used by tests, but in fact you need it in normal\n// operation to interact with capped collections.\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;\n\nMongoInternals.Connection = MongoConnection;\n"]},"sourceType":"script","hash":"195233bb657f80509a0b98e622ccf7d881bc9247"}
