{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"react-router","imported":["browserHistory"],"specifiers":[{"kind":"named","imported":"browserHistory","local":"browserHistory"}]},{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"meteor/themeteorchef:bert","imported":["Bert"],"specifiers":[{"kind":"named","imported":"Bert","local":"Bert"}]},{"source":"./validation.js","imported":[],"specifiers":[]}],"exports":{"exported":["handleResetPassword","options"],"specifiers":[{"kind":"local","local":"handleResetPassword","exported":"default"},{"kind":"local","local":"options","exported":"default"}]}}},"options":{"filename":"imports/modules/reset-password.js","filenameRelative":"imports/modules/reset-password.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/modules/reset-password.js.map","sourceFileName":"imports/modules/reset-password.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"reset-password"},"ignored":false,"code":"module.export({\n  \"default\": function () {\n    return handleResetPassword;\n  }\n});\nvar browserHistory = void 0;\nmodule.watch(require(\"react-router\"), {\n  browserHistory: function (v) {\n    browserHistory = v;\n  }\n}, 0);\nvar Accounts = void 0;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts: function (v) {\n    Accounts = v;\n  }\n}, 1);\nvar Bert = void 0;\nmodule.watch(require(\"meteor/themeteorchef:bert\"), {\n  Bert: function (v) {\n    Bert = v;\n  }\n}, 2);\nmodule.watch(require(\"./validation.js\"));\nvar component = void 0;\nvar token = void 0;\n\nvar handleReset = function () {\n  var password = document.querySelector('[name=\"newPassword\"]').value;\n  Accounts.resetPassword(token, password, function (error) {\n    if (error) {\n      Bert.alert(error.reason, 'danger');\n    } else {\n      browserHistory.push('/');\n      Bert.alert('Password reset!', 'success');\n    }\n  });\n};\n\nvar validate = function () {\n  $(component.resetPasswordForm).validate({\n    rules: {\n      newPassword: {\n        required: true,\n        minlength: 6\n      },\n      repeatNewPassword: {\n        required: true,\n        minlength: 6,\n        equalTo: '[name=\"newPassword\"]'\n      }\n    },\n    messages: {\n      newPassword: {\n        required: 'Enter a new password, please.',\n        minlength: 'Use at least six characters, please.'\n      },\n      repeatNewPassword: {\n        required: 'Repeat your new password, please.',\n        equalTo: 'Hmm, your passwords don\\'t match. Try again?'\n      }\n    },\n    submitHandler: function () {\n      handleReset();\n    }\n  });\n};\n\nfunction handleResetPassword(options) {\n  component = options.component;\n  token = options.token;\n  validate();\n}","map":{"version":3,"sources":["imports/modules/reset-password.js"],"names":["module","export","handleResetPassword","browserHistory","watch","require","v","Accounts","Bert","component","token","handleReset","password","document","querySelector","value","resetPassword","error","alert","reason","push","validate","$","resetPasswordForm","rules","newPassword","required","minlength","repeatNewPassword","equalTo","messages","submitHandler","options"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAAC,aAAQ;AAAA,WAAIC,mBAAJ;AAAA;AAAT,CAAd;AAAiD,IAAIC,uBAAJ;AAAmBH,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACF,gBAAD,YAAgBG,CAAhB,EAAkB;AAACH,qBAAeG,CAAf;AAAiB;AAApC,CAArC,EAA2E,CAA3E;AAA8E,IAAIC,iBAAJ;AAAaP,OAAOI,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAACE,UAAD,YAAUD,CAAV,EAAY;AAACC,eAASD,CAAT;AAAW;AAAxB,CAA7C,EAAuE,CAAvE;AAA0E,IAAIE,aAAJ;AAASR,OAAOI,KAAP,CAAaC,QAAQ,2BAAR,CAAb,EAAkD;AAACG,MAAD,YAAMF,CAAN,EAAQ;AAACE,WAAKF,CAAL;AAAO;AAAhB,CAAlD,EAAoE,CAApE;AAAuEN,OAAOI,KAAP,CAAaC,QAAQ,iBAAR,CAAb;AAOzT,IAAII,kBAAJ;AACA,IAAIC,cAAJ;;AAEA,IAAMC,cAAc,YAAM;AACxB,MAAMC,WAAWC,SAASC,aAAT,CAAuB,sBAAvB,EAA+CC,KAAhE;AACAR,WAASS,aAAT,CAAuBN,KAAvB,EAA8BE,QAA9B,EAAwC,UAACK,KAAD,EAAW;AACjD,QAAIA,KAAJ,EAAW;AACTT,WAAKU,KAAL,CAAWD,MAAME,MAAjB,EAAyB,QAAzB;AACD,KAFD,MAEO;AACLhB,qBAAeiB,IAAf,CAAoB,GAApB;AACAZ,WAAKU,KAAL,CAAW,iBAAX,EAA8B,SAA9B;AACD;AACF,GAPD;AAQD,CAVD;;AAYA,IAAMG,WAAW,YAAM;AACrBC,IAAEb,UAAUc,iBAAZ,EAA+BF,QAA/B,CAAwC;AACtCG,WAAO;AACLC,mBAAa;AACXC,kBAAU,IADC;AAEXC,mBAAW;AAFA,OADR;AAKLC,yBAAmB;AACjBF,kBAAU,IADO;AAEjBC,mBAAW,CAFM;AAGjBE,iBAAS;AAHQ;AALd,KAD+B;AAYtCC,cAAU;AACRL,mBAAa;AACXC,kBAAU,+BADC;AAEXC,mBAAW;AAFA,OADL;AAKRC,yBAAmB;AACjBF,kBAAU,mCADO;AAEjBG,iBAAS;AAFQ;AALX,KAZ4B;AAsBtCE,iBAtBsC,cAsBtB;AAAEpB;AAAgB;AAtBI,GAAxC;AAwBD,CAzBD;;AA2Be,SAAST,mBAAT,CAA6B8B,OAA7B,EAAsC;AACnDvB,cAAYuB,QAAQvB,SAApB;AACAC,UAAQsB,QAAQtB,KAAhB;AACAW;AACD","file":"imports/modules/reset-password.js.map","sourcesContent":["/* eslint-disable no-undef */\n\nimport { browserHistory } from 'react-router';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Bert } from 'meteor/themeteorchef:bert';\nimport './validation.js';\n\nlet component;\nlet token;\n\nconst handleReset = () => {\n  const password = document.querySelector('[name=\"newPassword\"]').value;\n  Accounts.resetPassword(token, password, (error) => {\n    if (error) {\n      Bert.alert(error.reason, 'danger');\n    } else {\n      browserHistory.push('/');\n      Bert.alert('Password reset!', 'success');\n    }\n  });\n};\n\nconst validate = () => {\n  $(component.resetPasswordForm).validate({\n    rules: {\n      newPassword: {\n        required: true,\n        minlength: 6,\n      },\n      repeatNewPassword: {\n        required: true,\n        minlength: 6,\n        equalTo: '[name=\"newPassword\"]',\n      },\n    },\n    messages: {\n      newPassword: {\n        required: 'Enter a new password, please.',\n        minlength: 'Use at least six characters, please.',\n      },\n      repeatNewPassword: {\n        required: 'Repeat your new password, please.',\n        equalTo: 'Hmm, your passwords don\\'t match. Try again?',\n      },\n    },\n    submitHandler() { handleReset(); },\n  });\n};\n\nexport default function handleResetPassword(options) {\n  component = options.component;\n  token = options.token;\n  validate();\n}\n"]},"hash":"d9f4b2209825367903834697799769a0e81ddee7"}
