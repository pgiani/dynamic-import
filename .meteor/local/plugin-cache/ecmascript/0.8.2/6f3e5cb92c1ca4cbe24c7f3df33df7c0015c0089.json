{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"react-router","imported":["browserHistory"],"specifiers":[{"kind":"named","imported":"browserHistory","local":"browserHistory"}]},{"source":"meteor/themeteorchef:bert","imported":["Bert"],"specifiers":[{"kind":"named","imported":"Bert","local":"Bert"}]},{"source":"../api/documents/methods.js","imported":["upsertDocument"],"specifiers":[{"kind":"named","imported":"upsertDocument","local":"upsertDocument"}]},{"source":"./validation.js","imported":[],"specifiers":[]}],"exports":{"exported":["documentEditor","options"],"specifiers":[{"kind":"local","local":"documentEditor","exported":"default"},{"kind":"local","local":"options","exported":"default"}]}}},"options":{"filename":"imports/modules/document-editor.js","filenameRelative":"imports/modules/document-editor.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/modules/document-editor.js.map","sourceFileName":"imports/modules/document-editor.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"document-editor"},"ignored":false,"code":"module.export({\n  \"default\": function () {\n    return documentEditor;\n  }\n});\nvar browserHistory = void 0;\nmodule.watch(require(\"react-router\"), {\n  browserHistory: function (v) {\n    browserHistory = v;\n  }\n}, 0);\nvar Bert = void 0;\nmodule.watch(require(\"meteor/themeteorchef:bert\"), {\n  Bert: function (v) {\n    Bert = v;\n  }\n}, 1);\nvar upsertDocument = void 0;\nmodule.watch(require(\"../api/documents/methods.js\"), {\n  upsertDocument: function (v) {\n    upsertDocument = v;\n  }\n}, 2);\nmodule.watch(require(\"./validation.js\"));\nvar component = void 0;\n\nvar handleUpsert = function () {\n  var doc = component.props.doc;\n  var confirmation = doc && doc._id ? 'Document updated!' : 'Document added!';\n  var upsert = {\n    title: document.querySelector('[name=\"title\"]').value.trim(),\n    body: document.querySelector('[name=\"body\"]').value.trim()\n  };\n  if (doc && doc._id) upsert._id = doc._id;\n  upsertDocument.call(upsert, function (error, response) {\n    if (error) {\n      Bert.alert(error.reason, 'danger');\n    } else {\n      component.documentEditorForm.reset();\n      Bert.alert(confirmation, 'success');\n      browserHistory.push(\"/documents/\" + (response.insertedId || doc._id));\n    }\n  });\n};\n\nvar validate = function () {\n  $(component.documentEditorForm).validate({\n    rules: {\n      title: {\n        required: true\n      },\n      body: {\n        required: true\n      }\n    },\n    messages: {\n      title: {\n        required: 'Need a title in here, Seuss.'\n      },\n      body: {\n        required: 'This thneeds a body, please.'\n      }\n    },\n    submitHandler: function () {\n      handleUpsert();\n    }\n  });\n};\n\nfunction documentEditor(options) {\n  component = options.component;\n  validate();\n}","map":{"version":3,"sources":["imports/modules/document-editor.js"],"names":["module","export","documentEditor","browserHistory","watch","require","v","Bert","upsertDocument","component","handleUpsert","doc","props","confirmation","_id","upsert","title","document","querySelector","value","trim","body","call","error","response","alert","reason","documentEditorForm","reset","push","insertedId","validate","$","rules","required","messages","submitHandler","options"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAAC,aAAQ;AAAA,WAAIC,cAAJ;AAAA;AAAT,CAAd;AAA4C,IAAIC,uBAAJ;AAAmBH,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACF,gBAAD,YAAgBG,CAAhB,EAAkB;AAACH,qBAAeG,CAAf;AAAiB;AAApC,CAArC,EAA2E,CAA3E;AAA8E,IAAIC,aAAJ;AAASP,OAAOI,KAAP,CAAaC,QAAQ,2BAAR,CAAb,EAAkD;AAACE,MAAD,YAAMD,CAAN,EAAQ;AAACC,WAAKD,CAAL;AAAO;AAAhB,CAAlD,EAAoE,CAApE;AAAuE,IAAIE,uBAAJ;AAAmBR,OAAOI,KAAP,CAAaC,QAAQ,6BAAR,CAAb,EAAoD;AAACG,gBAAD,YAAgBF,CAAhB,EAAkB;AAACE,qBAAeF,CAAf;AAAiB;AAApC,CAApD,EAA0F,CAA1F;AAA6FN,OAAOI,KAAP,CAAaC,QAAQ,iBAAR,CAAb;AAO7U,IAAII,kBAAJ;;AAEA,IAAMC,eAAe,YAAM;AAAA,MACjBC,GADiB,GACTF,UAAUG,KADD,CACjBD,GADiB;AAEzB,MAAME,eAAeF,OAAOA,IAAIG,GAAX,GAAiB,mBAAjB,GAAuC,iBAA5D;AACA,MAAMC,SAAS;AACbC,WAAOC,SAASC,aAAT,CAAuB,gBAAvB,EAAyCC,KAAzC,CAA+CC,IAA/C,EADM;AAEbC,UAAMJ,SAASC,aAAT,CAAuB,eAAvB,EAAwCC,KAAxC,CAA8CC,IAA9C;AAFO,GAAf;AAKA,MAAIT,OAAOA,IAAIG,GAAf,EAAoBC,OAAOD,GAAP,GAAaH,IAAIG,GAAjB;AAEpBN,iBAAec,IAAf,CAAoBP,MAApB,EAA4B,UAACQ,KAAD,EAAQC,QAAR,EAAqB;AAC/C,QAAID,KAAJ,EAAW;AACThB,WAAKkB,KAAL,CAAWF,MAAMG,MAAjB,EAAyB,QAAzB;AACD,KAFD,MAEO;AACLjB,gBAAUkB,kBAAV,CAA6BC,KAA7B;AACArB,WAAKkB,KAAL,CAAWZ,YAAX,EAAyB,SAAzB;AACAV,qBAAe0B,IAAf,kBAAkCL,SAASM,UAAT,IAAuBnB,IAAIG,GAA7D;AACD;AACF,GARD;AASD,CAnBD;;AAqBA,IAAMiB,WAAW,YAAM;AACrBC,IAAEvB,UAAUkB,kBAAZ,EAAgCI,QAAhC,CAAyC;AACvCE,WAAO;AACLjB,aAAO;AACLkB,kBAAU;AADL,OADF;AAILb,YAAM;AACJa,kBAAU;AADN;AAJD,KADgC;AASvCC,cAAU;AACRnB,aAAO;AACLkB,kBAAU;AADL,OADC;AAIRb,YAAM;AACJa,kBAAU;AADN;AAJE,KAT6B;AAiBvCE,iBAjBuC,cAiBvB;AAAE1B;AAAiB;AAjBI,GAAzC;AAmBD,CApBD;;AAsBe,SAASR,cAAT,CAAwBmC,OAAxB,EAAiC;AAC9C5B,cAAY4B,QAAQ5B,SAApB;AACAsB;AACD","file":"imports/modules/document-editor.js.map","sourcesContent":["/* eslint-disable no-undef */\n\nimport { browserHistory } from 'react-router';\nimport { Bert } from 'meteor/themeteorchef:bert';\nimport { upsertDocument } from '../api/documents/methods.js';\nimport './validation.js';\n\nlet component;\n\nconst handleUpsert = () => {\n  const { doc } = component.props;\n  const confirmation = doc && doc._id ? 'Document updated!' : 'Document added!';\n  const upsert = {\n    title: document.querySelector('[name=\"title\"]').value.trim(),\n    body: document.querySelector('[name=\"body\"]').value.trim(),\n  };\n\n  if (doc && doc._id) upsert._id = doc._id;\n\n  upsertDocument.call(upsert, (error, response) => {\n    if (error) {\n      Bert.alert(error.reason, 'danger');\n    } else {\n      component.documentEditorForm.reset();\n      Bert.alert(confirmation, 'success');\n      browserHistory.push(`/documents/${response.insertedId || doc._id}`);\n    }\n  });\n};\n\nconst validate = () => {\n  $(component.documentEditorForm).validate({\n    rules: {\n      title: {\n        required: true,\n      },\n      body: {\n        required: true,\n      },\n    },\n    messages: {\n      title: {\n        required: 'Need a title in here, Seuss.',\n      },\n      body: {\n        required: 'This thneeds a body, please.',\n      },\n    },\n    submitHandler() { handleUpsert(); },\n  });\n};\n\nexport default function documentEditor(options) {\n  component = options.component;\n  validate();\n}\n"]},"hash":"6f3e5cb92c1ca4cbe24c7f3df33df7c0015c0089"}
